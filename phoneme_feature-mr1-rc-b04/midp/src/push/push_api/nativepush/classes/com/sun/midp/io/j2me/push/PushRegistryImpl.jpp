/*
 *
 * Copyright  1990-2006 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation. 
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt). 
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA 
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions. 
 */

package com.sun.midp.io.j2me.push;

import java.io.InterruptedIOException;
import java.io.IOException;

import java.lang.ClassNotFoundException;

import javax.microedition.io.ConnectionNotFoundException;

import com.sun.midp.io.HttpUrl;

import com.sun.midp.midlet.MIDletStateHandler;
import com.sun.midp.midlet.MIDletSuite;

import com.sun.midp.security.SecurityToken;
import com.sun.midp.security.Permissions;

// #ifdef ENABLE_JSR_205
import com.sun.midp.io.j2me.mms.MMSAddress;
// #endif ENABLE_JSR_205

/**
 * Dynamic push connection and alarm registry.
 * Static push connections are expected to be handled by 
 * external AMS and Push directly.
 */
public class PushRegistryImpl {

    /**
     * Push option to only launch this suite when not other applications
     * are running.
     */
    public static final int PUSH_OPT_WHEN_ONLY_APP = 1;

    /** This class has a different security domain than the MIDlet suite */
    private static SecurityToken classSecurityToken;

    /**
     * Start listening for push notifications.
     * Since listening is done externally, this function does nothing.
     */
    public static void startListening() { }

    /**
     * Register a dynamic connection with the
     * application management software. Once registered,
     * the dynamic connection acts just like a
     * connection preallocated from the descriptor file.
     * The internal implementation includes the storage name
     * that uniquely identifies the <code>MIDlet</code>.
     *
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *               and <em>port number</em>
     *               (optional parameters may be included
     *               separated with semi-colons (;))
     * @param midlet  class name of the <code>MIDlet</code> to be launched,
     *               when new external data is available
     * @param filter a connection URL string indicating which senders
     *               are allowed to cause the MIDlet to be launched
     *
     * @exception  IllegalArgumentException if the connection string is not
     *               valid
     * @exception ConnectionNotFoundException if the runtime system does not
     *              support push delivery for the requested
     *              connection protocol
     * @exception IOException if the connection is already
     *              registered or if there are insufficient resources
     *              to handle the registration request
     * @exception ClassNotFoundException if the <code>MIDlet</code> class
     *               name can not be found in the current
     *               <code>MIDlet</code> suite
     * @exception SecurityException if the <code>MIDlet</code> does not
     *              have permission to register a connection
     * @exception IllegalStateException if the MIDlet suite context is
     *              <code>null</code>.
     * @see #unregisterConnection
     */
    public static void registerConnection(String connection, String midlet,
                                          String filter)
        throws ClassNotFoundException, IOException {

        MIDletStateHandler midletStateHandler =
            MIDletStateHandler.getMidletStateHandler();
        MIDletSuite midletSuite = midletStateHandler.getMIDletSuite();

        /* This method should only be called by running MIDlets. */
        if (midletSuite == null) {
            throw new IllegalStateException("Not in a MIDlet context");
        }

        /* Verify the MIDlet is in the current classpath. */
        if (midlet == null || midlet.length() == 0) {
            throw new ClassNotFoundException("MIDlet missing");
        }

        Class cl = Class.forName(midlet);
        Class m = Class.forName("javax.microedition.midlet.MIDlet");

        if (!m.isAssignableFrom(cl)) {
            throw new ClassNotFoundException("Not a MIDlet");
        }

        /* Perform the rest of the checks in the internal registry. */
        registerConnectionInternal(classSecurityToken, midletSuite,
                                   connection, midlet, filter, false);
    }

    /**
     * Check the registration arguments.
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *               and <em>port number</em>
     *               (optional parameters may be included
     *               separated with semi-colons (;))
     * @param midlet  class name of the <code>MIDlet</code> to be launched,
     *               when new external data is available
     * @param filter a connection URL string indicating which senders
     *               are allowed to cause the MIDlet to be launched
     * @exception  IllegalArgumentException if the connection string is not
     *               valid
     * @exception ClassNotFoundException if the <code>MIDlet</code> class
     *               name can not be found in the current
     *               <code>MIDlet</code> suite
     */
    private static void checkRegistration(String connection, String midlet,
					  String filter)
					  throws ClassNotFoundException {

        /* Verify the MIDlet is in the current classpath. */
        if (midlet == null || midlet.length() == 0) {
            throw new ClassNotFoundException("MIDlet missing");
        }

        /* Verify that the connection requested is valid. */
        if (connection == null || connection.length() == 0) {
            throw new IllegalArgumentException("Connection missing");
        }

        /* Verify that the filter requested is valid. */
        if (filter == null || filter.length() == 0) {
            throw new IllegalArgumentException("Filter missing");
        }

        /* Verify the filter string */
        int len = filter.length();

	// #ifdef ENABLE_JSR_120
	boolean isSMS = connection.startsWith("sms://");
	boolean isMMS = false;
	// #endif ENABLE_JSR_120

	// #ifdef ENABLE_JSR_205
	isMMS = connection.startsWith("mms://");
	// #endif ENABLE_JSR_205

	// #ifdef ENABLE_JSR_120
	if (isSMS || isMMS) {
            /* MSIDN characters restricted for WMA filters. */
            for (int i = 0; i < len; i++) {
                char c = filter.charAt(i);
                if (i == 0 && c == '+') continue;
                if (!(c == '?' || c == '*'  ||
                      ('0' <= c && c <= '9'))) {
                    throw new IllegalArgumentException("MSIDN filter invalid");
                }
            }
        } else if (connection.startsWith("cbs://")) {
            /* CBS filter is ignored. */
        } else {
        // #endif ENABLE_JSR_120

            /* IP address characters only for other connections. */
            for (int i = 0; i < len; i++) {
                char c = filter.charAt(i);
                if (!(c == '?' || c == '*' || c == '.' ||
                      ('0' <= c && c <= '9'))) {
                    throw new IllegalArgumentException("IP Filter invalid");
                }
            }
	// #ifdef ENABLE_JSR_120
        }
        // #endif ENABLE_JSR_120
    }

    /**
     * Register a dynamic connection with the
     * application management software. Once registered,
     * the dynamic connection acts just like a
     * connection preallocated from the descriptor file.
     * The internal implementation includes the storage name
     * that uniquely identifies the <code>MIDlet</code>.
     * This method bypasses the class loader specific checks
     * needed by the <code>Installer</code>.
     *
     * @param token security token of the calling class, can be null
     * @param midletSuite MIDlet suite for the suite registering,
     *                   the suite only has to implement isRegistered,
     *                   checkForPermission, and getID.
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *               and <em>port number</em>
     *               (optional parameters may be included
     *               separated with semi-colons (;))
     * @param midlet  class name of the <code>MIDlet</code> to be launched,
     *               when new external data is available
     * @param filter a connection URL string indicating which senders
     *               are allowed to cause the MIDlet to be launched
     * @param bypassChecks if true, bypass the permission checks,
     *         used by the installer when redo old connections during an
     *         aborted update
     *
     * @exception  IllegalArgumentException if the connection string is not
     *               valid
     * @exception ConnectionNotFoundException if the runtime system does not
     *              support push delivery for the requested
     *              connection protocol
     * @exception IOException if the connection is already
     *              registered or if there are insufficient resources
     *              to handle the registration request
     * @exception ClassNotFoundException if the <code>MIDlet</code> class
     *               name can not be found in the current
     *               <code>MIDlet</code> suite
     * @exception SecurityException if the <code>MIDlet</code> does not
     *              have permission to register a connection
     *
     * @see #unregisterConnection
     */
    public static void registerConnectionInternal(SecurityToken token,
                                                  MIDletSuite midletSuite,
                                                  String connection,
                                                  String midlet,
                                                  String filter,
                                                  boolean bypassChecks)
        throws ClassNotFoundException, IOException {

        HttpUrl url;

        if (token == null) {
            MIDletSuite current =
                MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

            if (current != null) {
                current.checkIfPermissionAllowed(Permissions.AMS);
            }
        } else {
            token.checkIfPermissionAllowed(Permissions.AMS);
        }

        if (!bypassChecks) {
            try {
                midletSuite.checkForPermission(Permissions.PUSH, null);
                /* Check the registration arguments. */
                checkRegistration(connection, midlet, filter);

                /* Check if an appropriate MIDlet-<n> record exists. */
                if (!midletSuite.isRegistered(midlet)) {
                    throw new
                        ClassNotFoundException("No MIDlet-<n> registration");
                }

                url = new HttpUrl(connection);

                // Server connections do not have a host
                if (url.host != null) {
                    throw new ConnectionNotFoundException(
                        "Connection not supported");
                }

                /*
                 * Attempt to open the connection to perform security check
                 * int the context of the current MIDlet suite.
                 */

                if (connection.startsWith("socket://")) {
                    try {
                        Class.forName(
                            "com.sun.midp.io.j2me.serversocket.Socket");
                    } catch (ClassNotFoundException e) {
                        throw new ConnectionNotFoundException(
                            "Connection not supported");
                    }

                    if (url.port == -1) {
                        new IllegalArgumentException("Port missing");
                    }

                    midletSuite.checkForPermission(Permissions.TCP_SERVER,
                                                   connection);
                } else if (connection.startsWith("datagram://")) {
                    try {
                        Class.
                            forName("com.sun.midp.io.j2me.datagram.Protocol");
                    } catch (ClassNotFoundException e) {
                        throw new ConnectionNotFoundException(
                            "Connection not supported");
                    }
                    
                    /*
                     * Check the suite permission for the connection
                     * and close the connection immediately.
                     */
                    midletSuite.checkForPermission(Permissions.UDP_SERVER,
                                                   connection);
                } 
                 // #ifdef ENABLE_JSR_120
                 else if (connection.startsWith("sms://")) {
                    try {
                        Class.forName("com.sun.midp.io.j2me.sms.Protocol");
                    } catch (ClassNotFoundException e) {
                        throw new ConnectionNotFoundException(
                            "Connection not supported");
                    }
                    
                    /*
                     * Check the suite permission for the connection
                     * and close the connection immediately.
                     */
                    midletSuite.checkForPermission(Permissions.SMS_SERVER,
                           connection);
                } else if (connection.startsWith("cbs://")) {
                    try {
                        Class.forName("com.sun.midp.io.j2me.cbs.Protocol");
                    } catch (ClassNotFoundException e) {
                        throw new ConnectionNotFoundException(
                            "Connection not supported");
                    }
                    
                    midletSuite.checkForPermission(Permissions.CBS_SERVER,
                           connection);
                } 
                // #endif ENABLE_JSR_120

		// #ifdef ENABLE_JSR_205
                else if (connection.startsWith("mms://")) {
                    try {
                        Class.forName("com.sun.midp.io.j2me.mms.Protocol");
                    } catch (ClassNotFoundException e) {
                        throw new ConnectionNotFoundException(
                            "Connection not supported");
                    }

                    MMSAddress mmsAddress = MMSAddress.getParsedMMSAddress(connection);

                    if (mmsAddress.type != MMSAddress.APP_ID) {
                        throw new IllegalArgumentException("Invalid connection string");
                    }
                    
                    /*
                     * Check the suite permission for the connection
                     * and close the connection immediately.
                     */
                    midletSuite.checkForPermission(Permissions.MMS_SERVER,
                           connection);
                } 
                 // #endif ENABLE_JSR_205

                 else {
                    throw new ConnectionNotFoundException(
                      "Connection not supported");
                }
            } catch (InterruptedException ie) {
                throw new InterruptedIOException(
                    "Interrupted while trying to ask the user permission");
            }
        }

	// Exceptions will be thrown from native in case of error
        registerConnection0(midletSuite.getID(),
			    connection, midlet, filter);
    }

    /**
     * Remove a dynamic connection registration.
     *
     * @param connection generic connection <em>protocol</em>,
     *             <em>host</em> and <em>port number</em>
     * @exception SecurityException if the connection was
     *            not registered by the current <code>MIDlet</code>
     *            suite
     * @return <code>true</code> if the unregistration was successful,
     *         <code>false</code> the  connection was not registered.
     * @see #registerConnection
     */
    public static boolean unregisterConnection(String connection) {

        /* Verify the connection string before using it. */
        if (connection == null || connection.length() == 0) {
            return false;
        }

        MIDletStateHandler midletStateHandler =
            MIDletStateHandler.getMidletStateHandler();
        MIDletSuite current = midletStateHandler.getMIDletSuite();

	// SecurityException will be thrown in native if no permission
        return unregisterConnection0(current.getID(), connection);
    }
    /**
     * Check in a push connection into AMS so the owning MIDlet can get
     * launched next time data is pushed. This method is used when a MIDlet
     * will not be able to get the connection and close (check in) the
     * connection for some reason. (normally because the user denied a
     * permission)
     * <p>
     * For datagram connections this function will discard the cached message.
     * <p>
     * For server socket connections this function will close the
     * accepted connection.
     *
     * @param token security token of the calling class
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *              and <em>port number</em>
     *              (optional parameters may be included
     *              separated with semi-colons (;))
     * @exception IllegalArgumentException if the connection string is not
     *              valid
     * @exception SecurityException if the <code>MIDlet</code> does not
     *              have permission to clear a connection
     * @return <code>true</code> if the check in was successful,
     *         <code>false</code> the connection was not registered.
     * @see #unregisterConnection
     */
    public static boolean checkInConnectionInternal(SecurityToken token,
                                                    String connection) {
        token.checkIfPermissionAllowed(Permissions.AMS);
        /* Verify that the connection requested is valid. */
        if (connection == null || connection.length() == 0) {
            throw new IllegalArgumentException("Connection missing");
        }

	// throw new IllegalStateException("Unsupported");
	return false;
    }

    /**
     * Initializes the security token for this class, so it can
     * perform actions that a normal MIDlet Suite cannot.
     *
     * @param token security token for this class.
     */
    public static void initSecurityToken(SecurityToken token) {
        if (classSecurityToken == null) {
            classSecurityToken = token;
        }
    }

    /**
     * Return a list of registered connections for the current
     * <code>MIDlet</code> suite.
     *
     * @param available if <code>true</code>, only return the list of
     *      connections with input available
     * @return array of connection strings, where each connection is
     *       represented by the generic connection <em>protocol</em>,
     *       <em>host</em> and <em>port number</em> identification
     */
    public static String listConnections(boolean available) {
        MIDletSuite current =
            MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

        if (current == null) {
            return null;
        }

        return listConnections(classSecurityToken, current.getID(),
                               available);
    }

    /**
     * Return a list of registered connections for given
     * <code>MIDlet</code> suite.
     *
     * @param id identifies the specific <code>MIDlet</code>
     *               suite to be launched
     * @param available if <code>true</code>, only return the list of
     *      connections with input available
     *
     * @return array of connection strings, where each connection is
     *       represented by the generic connection <em>protocol</em>,
     *       <em>host</em> and <em>port number</em> identification
     */
    public static String listConnections(String id, boolean available) {

        return listConnections(null, id, available);
    }

    /**
     * Return a list of registered connections for given
     * <code>MIDlet</code> suite. AMS permission is required.
     *
     * @param token security token of the calling class, or <code>null</code>
     *        to check the suite
     * @param id identifies the specific <code>MIDlet</code>
     *               suite to be launched
     * @param available if <code>true</code>, only return the list of
     *      connections with input available
     *
     * @return array of connection strings, where each connection is
     *       represented by the generic connection <em>protocol</em>,
     *       <em>host</em> and <em>port number</em> identification
     */
    public static String listConnections(SecurityToken token,
            String id, boolean available) {
        String connections = null;

        if (token == null) {
            MIDletSuite current =
                MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

            if (current != null) {
                current.checkIfPermissionAllowed(Permissions.AMS);
            }
        } else {
            token.checkIfPermissionAllowed(Permissions.AMS);
        }

        String[] entries = listEntries0(id, available);

	if (entries == null || entries.length == 0) {
	    connections = null;
	} else {
	    connections = entries[0];
	    for (int i = 3; i < entries.length; i += 3) {
		connections += ',' + entries[i];
	    }
        }

        return connections;
    }

    /**
     * Unregister all the connections for a <code>MIDlet</code> suite.
     *
     * @param id identifies the specific <code>MIDlet</code> suite
     */
    public static void unregisterConnections(String id) {
        MIDletSuite current =
            MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

        if (current != null) {
            current.checkIfPermissionAllowed(Permissions.AMS);
        }
	
	// throw new IllegalStateException("Unsupported");
    }


    /**
     * Retrieve the registered <code>MIDlet</code> for a requested connection.
     *
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *              and <em>port number</em>
     *              (optional parameters may be included
     *              separated with semi-colons (;))
     * @return  class name of the <code>MIDlet</code> to be launched,
     *              when new external data is available, or
     *              <code>null</code> if the connection was not
     *              registered
     * @see #registerConnection
     */
    public static String getMIDlet(String connection) {

        /* Verify that the connection requested is valid. */
        if (connection == null || connection.length() == 0) {
            return null;
        }

        MIDletSuite current =
            MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

        if (current == null) {
            return null;
        }

	String midlet = null;
	String[] entries = listEntries0(current.getID(), false);

	if (entries != null) {
	    for (int i = 0; i < entries.length; i += 3) {
		if (connection.equals(entries[i])) {
		    midlet = entries[i+1];
		    break;
		}
	    }
	}

	return midlet;
    }

    /**
     * Retrieve the registered filter for a requested connection.
     *
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *              and <em>port number</em>
     *              (optional parameters may be included
     *              separated with semi-colons (;))
     * @return a filter string indicating which senders
     *              are allowed to cause the MIDlet to be launched or
     *              <code>null</code> if the connection was not
     *              registered
     * @see #registerConnection
     */
    public static String getFilter(String connection) {

        /* Verify that the connection requested is valid. */
        if (connection == null || connection.length() == 0) {
            return null;
        }

        MIDletSuite current =
            MIDletStateHandler.getMidletStateHandler().getMIDletSuite();

        if (current == null) {
            return null;
        }

	String filter = null;
	String[] entries = listEntries0(current.getID(), false);

	if (entries != null) {
	    for (int i = 0; i < entries.length; i += 3) {
		if (connection.equals(entries[i])) {
		    filter = entries[i+2];
		    break;
		}
	    }
	}

	return filter;
    }

    /**
     * Register a time to launch the specified application. The
     * <code>PushRegistry</code> supports one outstanding wake up
     * time per <code>MIDlet</code> in the current suite. An application
     * is expected to use a <code>TimerTask</code> for notification
     * of time based events while the application is running.
     * <P>If a wakeup time is already registered, the previous value will
     * be returned, otherwise a zero is returned the first time the
     * alarm is registered. </P>
     *
     * @param midlet  class name of the <code>MIDlet</code> within the
     *                current running <code>MIDlet</code> suite
     *                to be launched,
     *                when the alarm time has been reached
     * @param time time at which the <code>MIDlet</code> is to be executed
     *        in the format returned by <code>Date.getTime()</code>
     * @return the time at which the most recent execution of this
     *        <code>MIDlet</code> was scheduled to occur,
     *        in the format returned by <code>Date.getTime()</code>
     * @exception ConnectionNotFoundException if the runtime system does not
     *              support alarm based application launch
     * @exception ClassNotFoundException if the <code>MIDlet</code> class
     *              name can not be found in the current
     *              <code>MIDlet</code> suite
     * @see Date#getTime()
     * @see Timer
     * @see TimerTask
     */
    public static long registerAlarm(String midlet, long time)
        throws ClassNotFoundException, ConnectionNotFoundException {

        MIDletStateHandler midletStateHandler =
            MIDletStateHandler.getMidletStateHandler();
        MIDletSuite midletSuite = midletStateHandler.getMIDletSuite();

        /* There is no suite running when installing from the command line. */
        if (midletSuite != null) {
            try {
                midletSuite.checkForPermission(Permissions.PUSH, null);
            } catch (InterruptedException ie) {
                throw new RuntimeException(
                    "Interrupted while trying to ask the user permission");
            }
        }

        /* Verify the MIDlet is in the current classpath. */
        if (midlet == null || midlet.length() == 0) {
            throw new ClassNotFoundException("MIDlet missing");
        }

        /* Check if an appropriate MIDlet-<n> record exists. */
        if (!midletSuite.isRegistered(midlet)) {
            throw new ClassNotFoundException("No MIDlet-<n> registration");
        }

        Class c = Class.forName(midlet);
        Class m = Class.forName("javax.microedition.midlet.MIDlet");

        if (!m.isAssignableFrom(c)) {
            throw new ClassNotFoundException("Not a MIDlet");
        }

        /*
         * Add the alarm for the specified MIDlet int the current
         * MIDlet suite.
         */
        MIDletSuite current =
              MIDletStateHandler.getMidletStateHandler().getMIDletSuite();
        if (current != null) {
            return registerAlarm0(current.getID(), midlet, time);
        }

        return 0;
    }

    /**
     * Sets the flag which enables push launches to take place.
     *
     * @param token security token of the calling class
     * @param enable set to <code>true</code> to enable launching
     *  of MIDlets based on alarms and connection notification
     *  events, otherwise set to <code>false</code> to disable
     *  launches
     */
    public static void enablePushLaunch(SecurityToken token,
          boolean enable) {
        token.checkIfPermissionAllowed(Permissions.AMS);
	
	// throw new IllegalStateException("Unsupported");
    }

    /**
     * Sets the flag which enables push launches to take place.
     *
     * @param enable set to <code>true</code> to enable launching
     *  of MIDlets based on alarms and connection notification
     *  events, otherwise set to <code>false</code> to disable
     *  launches
     */
    public static void enablePushLaunch(boolean enable) {
        MIDletStateHandler midletStateHandler =
            MIDletStateHandler.getMidletStateHandler();
        MIDletSuite midletSuite = midletStateHandler.getMIDletSuite();

        /* There is no suite running when installing from the command line. */
        if (midletSuite != null) {
            midletSuite.checkIfPermissionAllowed(Permissions.AMS);
        }

	// throw new IllegalStateException("Unsupported");
    }

    /**
     * Sets the flag which indicates that the AMS is operating in MVM
     * single MIDlet mode.
     */
    public static void setMvmSingleMidletMode() {
        MIDletStateHandler midletStateHandler =
            MIDletStateHandler.getMidletStateHandler();
        MIDletSuite midletSuite = midletStateHandler.getMIDletSuite();

        /* There is no suite running when installing from the command line. */
        if (midletSuite != null) {
            midletSuite.checkIfPermissionAllowed(Permissions.AMS);
        }

	throw new IllegalStateException("Unsupported");
    }

    /**
     * Register dynamic connection with native push.
     *
     * @param suiteId current suite ID
     * @param connection generic connection <em>protocol</em>, <em>host</em>
     *               and <em>port number</em>
     *               (optional parameters may be included
     *               separated with semi-colons (;))
     * @param midlet  class name of the <code>MIDlet</code> to be launched,
     *               when new external data is available
     * @param filter a connection URL string indicating which senders
     *               are allowed to cause the MIDlet to be launched
     *
     * @exception  IllegalArgumentException if the connection string is not
     *               valid
     * @exception ConnectionNotFoundException if the runtime system does not
     *              support push delivery for the requested
     *              connection protocol
     * @exception IOException if the connection is already
     *              registered or if there are insufficient resources
     *              to handle the registration request
     * @exception ClassNotFoundException if the <code>MIDlet</code> class
     *               name can not be found in the current
     *               <code>MIDlet</code> suite
     * @exception SecurityException if the <code>MIDlet</code> does not
     *              have permission to register a connection
     */
    private static native void registerConnection0(String suiteId,
						   String connection,
						   String midlet,
						   String filter);

    /**
     * Native connection registry add alarm function.
     * 
     * @param suiteId current MIDlet Suite ID
     * @param midlet string to register
     * @param time
     * @return 0 if unregistered, otherwise the time of the previous
     *         registered alarm
     */
    private static native long registerAlarm0(String suiteId,
					      String midlet,
					      long time);

    /**
     * Native connection registry unregister connection function.
     *
     * @param suiteId current suite ID
     * @param connection string to register
     * @return true if successful, false if connection was not registered
     * @exception SecurityException if connection was registered by another
     *				    suite
     */
    private static native boolean unregisterConnection0(String suiteId,
							String connection);

    /**
     * Native connection registry listing function.
     * @param suiteId midlet suite
     * @param available if <code>true</code>, only return the list of
     *      connections with input available
     * @return array of strings which are ordered in triplet
     *        (connection, midlet, filter)
     */
    private static native String[] listEntries0(String suiteId,
						boolean available);
}
