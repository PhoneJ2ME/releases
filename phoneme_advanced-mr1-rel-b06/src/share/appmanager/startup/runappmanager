#!/bin/sh
#
# Copyright 1990-2006 Sun Microsystems, Inc. All Rights Reserved. 
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER 
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 only,
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included at /legal/license.txt).
# 
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 or visit www.sun.com if you need additional information or have
# any questions.

#  Usage:
#    runappmanager [ app | server | warmup | server_only | cleanup | status | presentation ] [ presentation ]
#    'presentation' is the name of a presentation module to be used with the server.
#    It is only of use when specified by itself or with 'app'.  Each possible
#    value of 'presentation' should have corresponding values pertaining to
#    its jarfile and the main class within this script.
#    The current possible values are: AwtPDA, PBP, and LaunchTCK
#
# Example commands:
#     runappmanager (runs the appmanager with the default presentation, both server and client)
#     runappmanager server (just run the server w/ warmup, no gui)
#     runappmanager server_only (just run the server w/o warmup, no gui)
#     runappmanager app (just run the client, with the default presentation)
#     runappmanager app PBP (just run the client, with the PBP presentation)
#     runappmanager warmup (just do a warmup, server must already be running)
#     runappmanager LaunchTCK (run the server and client with the LaunchTCK presentation)
#     runappmanager app LaunchTCK (run just the client with the LaunchTCK presentation)
#     runappmanager cleanup (kill all processes created by server, in addition to the server itself)
#     runappmanager status (get status of server and warmup of this machine)

##### Start: Possible Variables Needing Modification #####

CDCAMS_PLATFORM=`uname -a | cut -d ' ' -f 12`
if [ "$CDCAMS_PLATFORM" = "unknown" ] ; then
  CDCAMS_PLATFORM=`uname -a | cut -d ' ' -f 11`
fi

# CDCAMS_HOME is primarily used when running from a build within your workspace.
if [ -z "$CDCAMS_HOME" ] ; then
    export CDCAMS_HOME=/home/`whoami`/cdcams-master
fi

# CDCAMS_INSTALL is primarily used when running from an unzipped installation.
if [ -z "$CDCAMS_INSTALL" ] ; then
   if [ "$CDCAMS_PLATFORM" = "armv5tel" ] ; then
      export CDCAMS_INSTALL=/home/cdcams
      export LOGNAME=root
      export QTDIR=/home/QtPalmtop
      export PRESENTATION=AwtPDA
   elif [ "$CDCAMS_PLATFORM" = "i686" ] ; then
      export CDCAMS_INSTALL=$CDCAMS_HOME/build/linux-x86-suse
      export PRESENTATION=AwtPDA
   elif [ "$CDCAMS_PLATFORM" = "mips" ] ; then
      export CDCAMS_INSTALL=$CDCAMS_HOME/build/linux-mips-cobalt
      export PRESENTATION=PBP
   else
      export CDCAMS_INSTALL=$CDCAMS_HOME
      export PRESENTATION=AwtPDA
   fi
else
  export PRESENTATION=AwtPDA
fi

# Machine for the server; defaults to the machine from which this script is launched.
if [ -z "$CDCAMS_SERVER" ] ; then
  if [ "$CDCAMS_PLATFORM" = "armv5tel" ] ; then
    export CDCAMS_SERVER=127.0.0.1
  else
# Uncomment below if you want to use the server name rather than the localhost ip.
#    export CDCAMS_SERVER=`uname -a | cut -d ' ' -f 2`
    export CDCAMS_SERVER=127.0.0.1
  fi
fi

# Port number to communicate with
if [ -z "$CDCAMS_PORT" ] ; then
  export CDCAMS_PORT=7788               # port number used by server and client
fi

# Default to no decorations
export DECORATIONS=false                 # true, false

# Launch the appmanager as a clone or as a standalone vm
export LAUNCH_AS_CLONE=true
 
##### End: Possible Variables Needing Modification #####

if [ "$1" = "server" ] ; then
    DO_CLEANUP=true
    DO_SERVER=true
    DO_WARMUP=true
elif [ "$1" = "server_only" ] ; then
    DO_CLEANUP=true
    DO_SERVER=true
elif [ "$1" = "warmup" ] ; then
    DO_WARMUP=true
elif [ "$1" = "app" ] ; then
    DO_APP=true
elif [ "$1" = "cleanup" ] ; then
    DO_CLEANUP=true
elif [ "$1" = "status" ] ; then
    DO_STATUS=true
elif [ "$1" = "-qcop" ] ; then
    DO_CLEANUP=false
    DO_SERVER=false
    DO_WARMUP=false
    DO_APP=true
elif [ "$1" = "AwtPDA" -o "$1" = "PBP" -o "$1" = "LaunchTCK" ] ; then
    DO_CLEANUP=true
    DO_SERVER=true
    DO_WARMUP=true
    DO_APP=true
    PRESENTATION=$1
elif [ "$1" = "" ] ; then
    DO_CLEANUP=true
    DO_SERVER=true
    DO_WARMUP=true
    DO_APP=true
else
    echo "Usage: "
    echo "    runappmanager [ app | server | warmup | server_only | cleanup | status | presentation ] [ presentation ]"
    echo "    'presentation' is the name of a presentation module to be used with the server."
    echo "    It is only of use when specified by itself of with 'app'.  Each possible"
    echo "    value of 'presentation' should have corresponding values pertaining to"
    echo "    its jarfile and the main class within this script."
    echo "    The current possible values are: AwtPDA, PBP, and LaunchTCK"
    echo ""
    echo " Example commands:"
    echo "     runappmanager (runs the appmanager with the default presentation, both server and client)"
    echo "     runappmanager server (just run the server w/ warmup, no gui)"
    echo "     runappmanager server_only (just run the server w/o warmup, no gui)"
    echo "     runappmanager app (just run the client, with the default presentation)"
    echo "     runappmanager app PBP (just run the client, with the PBP presentation)"
    echo "     runappmanager warmup (just do a warmup, server must already be running)."
    echo "     runappmanager LaunchTCK (run the server and client with the LaunchTCK presentation)"
    echo "     runappmanager app LaunchTCK (run just the client with the LaunchTCK presentation)"
    echo "     runappmanager cleanup (kill all processes created by server, in addition to the server itself)"
    echo "     runappmanager status (get status of server and warmup of this machine)"
    echo ""
    exit 0
fi

if [ "$2" = "AwtPDA" -o "$2" = "PBP" -o "$2" = "LaunchTCK" ] ; then
  if [ "$DO_APP" = "true" ] ; then
    PRESENTATION=$2
  else
    echo "Illegal options specified:  Cannot specify $PRESENTATION without using app first."
    echo "Type 'runappmanager help' for details."
    exit 0
  fi
fi

echo "********** AppManager Settings **********"
echo "CDCAMS_HOME:     $CDCAMS_HOME"
echo "CDCAMS_INSTALL:  $CDCAMS_INSTALL"
echo "CDCAMS_PLATFORM: $CDCAMS_PLATFORM"
echo "CDCAMS_SERVER:   $CDCAMS_SERVER"
echo "CDCAMS_PORT:     $CDCAMS_PORT"
if [ "$DO_APP" = "true" ] ; then
  echo "PRESENTATION:     $PRESENTATION"
fi
echo "*****************************************"

export APPMANAGER_JARFILE=$CDCAMS_INSTALL/lib/appmanager.jar
export APPMANAGER_CLIENT_JARFILE=$CDCAMS_INSTALL/lib/appmanager-client.jar
export APPMANAGER_XML_JARFILE=$CDCAMS_INSTALL/lib/j2me_xml_cdc.jar
export CVMC="$CDCAMS_INSTALL/bin/cvmc -port $CDCAMS_PORT -host $CDCAMS_SERVER"
export LD_LIBRARY_PATH=$CDCAMS_INSTALL/lib:$QTDIR:$LD_LIBRARY_PATH
export CDCAMS_PLATFORM

### This is where you may add references to additional presentation modules
if [ "$PRESENTATION" = "AwtPDA" ] ; then
    PRESENTATION_JARFILE=$CDCAMS_INSTALL/lib/AwtPDA_PresentationMode.jar
    PRESENTATION_MAIN_CLASS=com.sun.appmanager.impl.presentation.AwtPDA.AwtPDAPresentationMode
elif [ "$PRESENTATION" = "PBP" ] ; then
    PRESENTATION_JARFILE=$CDCAMS_INSTALL/lib/PBP_PresentationMode.jar
    PRESENTATION_MAIN_CLASS=com.sun.appmanager.impl.presentation.PBP.PBPPresentationMode
    export PBP_SCREEN_BOUNDS=0,342-640x100
elif [ "$PRESENTATION" = "LaunchTCK" ] ; then
    PRESENTATION_JARFILE=$CDCAMS_INSTALL/lib/LaunchTCK_PresentationMode.jar
    PRESENTATION_MAIN_CLASS=com.sun.appmanager.impl.presentation.LaunchTCK.LaunchTCKPresentationMode
else
    echo "Illegal presentation $PRESENTATION.  Exiting."
    exit 0
fi

CLEANUP_LOGFILE=/tmp/appmanager_cleanup_`whoami`
SERVER_LOGFILE=/tmp/appmanager_server_`whoami`
WARMUP_LOGFILE=/tmp/appmanager_warmup_`whoami`
APP_LOGFILE=/tmp/appmanager_app_`whoami`

cd $CDCAMS_INSTALL/bin

### Remove any current instances of the server.
if [ "$DO_CLEANUP" = "true" ] ; then

  rm -f $CLEANUP_LOGFILE
  touch $CLEANUP_LOGFILE

# We need to kill the appmanager process first since it has primary control over the vm server.
  if [ -f $APP_LOGFILE ] ; then
    isAClone=`head -1 $APP_LOGFILE | grep "CHILD PID"`
    if [ ! "$isAClone" = "" ] ; then
      process_id=`head -1 $APP_LOGFILE | sed 's/CHILD PID=//g'`
      if [ ! "$process_id" = "" ] ; then
        kill -9 $process_id >> $CLEANUP_LOGFILE 2>&1
        ### Now, kill the clones and then the server
        if [ -f $SERVER_LOGFILE ] ; then
          CLEANUP_APPLICATIONS_COMMAND="$CVMC -killall"
          $CLEANUP_APPLICATIONS_COMMAND >> $CLEANUP_LOGFILE 2>&1

          CLEANUP_SERVER_COMMAND="$CVMC -killserver"
          $CLEANUP_SERVER_COMMAND >> $CLEANUP_LOGFILE 2>&1
        fi
      fi
    else
      # Use the brute force method of killing apps.
      process_ids=`ps auxww | grep cvm | grep -v grep | sed 's/  */ /1' | cut -d ' ' -f 2`
      if [ ! "$process_ids" = "" ] ; then
        echo "Server instance already found... removing."
        for id in $process_ids; do \
            kill -9 $id
        done;
        $command 2>&1
      else
        echo "No server instances found to cleanup."
      fi
    fi
  fi

### Now, kill the clones and then the server
  if [ -f $SERVER_LOGFILE ] ; then
    CLEANUP_APPLICATIONS_COMMAND="$CVMC -killall"
    $CLEANUP_APPLICATIONS_COMMAND >> $CLEANUP_LOGFILE 2>&1

    CLEANUP_SERVER_COMMAND="$CVMC -killserver"
    $CLEANUP_SERVER_COMMAND >> $CLEANUP_LOGFILE 2>&1
  fi

  rm -f $SERVER_LOGFILE $WARMUP_LOGFILE $APP_LOGFILE

  echo "Done with cleanup."

fi

##### Commands to start the cdcams mtask server
if [ "$DO_SERVER" = "true" ] ; then
    if [ "$CDCAMS_PLATFORM" = "i686" ] ; then
      CDCAMS_SERVER_OPTIONS="-Xserver:port=$CDCAMS_PORT -Xbootclasspath/a:$APPMANAGER_CLIENT_JARFILE -Dcdcams.decorations=$DECORATIONS -Dcdcams.verbose=$LAUNCH_AS_CLONE"
    else
      CDCAMS_SERVER_OPTIONS="-Xserver:port=$CDCAMS_PORT -Xbootclasspath/a:$APPMANAGER_CLIENT_JARFILE -Dcdcams.decorations=$DECORATIONS -Dcdcams.verbose=$LAUNCH_AS_CLONE"
    fi
    CDCAMS_SERVER_COMMAND="$CDCAMS_INSTALL/bin/cvm $CDCAMS_SERVER_OPTIONS"
    echo "Launching the server: $CDCAMS_SERVER_COMMAND"
    echo "You can view the server output here: "
    echo "  file:$SERVER_LOGFILE"
    echo ""
    rm -f $SERVER_LOGFILE
    $CDCAMS_SERVER_COMMAND > $SERVER_LOGFILE 2>&1 &
fi

### Warmup Command ###
### We need to do some fancy stuff here because on some systems it
### may take longer for the server to be ready to accept connections.
### We'll try a number of times if we get a known error message indicating
### that a server connection could not be made.

if  [ "$DO_WARMUP" = "true" ] ; then
    numAttempts=0
    numAttemptsMax=100
    while [ "$numAttempts" -ne "$numAttemptsMax" ] ; do
      if [ ! -f $SERVER_LOGFILE ] ; then
        numAttempts=`expr $numAttempts + 1`
        echo -n "."
        usleep 1000
      else
        output=`cat $SERVER_LOGFILE | grep "Starting mTASK server to listen on port"`
        if [ ! "$output" = "" ] ; then
          numAttempts=100
          echo ""
        else
          numAttempts=`expr $numAttempts + 1`
          echo -n "."
          usleep 1000 
        fi
      fi
    done

    echo ""

# Now, if it can't find $SERVER_LOGFILE, it might not bad that bad.
# The warmup command may have been issue from a different server, so

    if [ -f $SERVER_LOGFILE ] ; then
      good=`cat $SERVER_LOGFILE | grep "done!"`
      bad=`cat $SERVER_LOGFILE | grep "failed"`
    fi

# We'll launch the warmup command anyways in case the command is coming
# from a different server.
    if [ ! "$bad" = "" ] ; then
      echo "Server on this machine may have had errors on launch.  Will try to do warmup anyways."
    fi

    if [ ! "$good" = "" ] ; then
      echo "Server found on this machine.  Issuing warmup command."
    fi

    WARMUP_COMMAND="$CVMC -warmup -initClasses $CDCAMS_INSTALL/repository/profiles/classesList.txt -precompileMethods $CDCAMS_INSTALL/repository/profiles/methodsList.txt"

    echo "Executing warmup command: $WARMUP_COMMAND"
    echo "You can view the warmup output here:"
    echo "    file:$WARMUP_LOGFILE"
    echo ""
    rm -f $WARMUP_LOGFILE
    $WARMUP_COMMAND > $WARMUP_LOGFILE 2>&1 &

fi  ### DO_WARMUP

### App Command
if  [ "$DO_APP" = "true" ] ; then
    if [ "$LAUNCH_AS_CLONE" = "true" ] ; then
        APP_COMMAND="$CVMC -command JDETACH -XappName=$0 -Xbootclasspath/a:$APPMANAGER_JARFILE:$PRESENTATION_JARFILE:$APPMANAGER_XML_JARFILE -Dcdcams.presentation=$PRESENTATION_MAIN_CLASS com.sun.appmanager.impl.CDCAmsAppManager -nowarmup -port $CDCAMS_PORT -server $CDCAMS_SERVER"
    else
        APP_COMMAND="$CDCAMS_INSTALL/bin/cvm -XappName=$0 -Xbootclasspath/a:$APPMANAGER_JARFILE:$PRESENTATION_JARFILE:$APPMANAGER_XML_JARFILE -Dcdcams.verbose=$LAUNCH_AS_CLONE -Dcdcams.presentation=$PRESENTATION_MAIN_CLASS com.sun.appmanager.impl.CDCAmsAppManager -nowarmup -port $CDCAMS_PORT -server $CDCAMS_SERVER"
    fi
    echo "Executing App command: $APP_COMMAND"
    rm -f $APP_LOGFILE
    echo "You can view the app output here:"
    echo "    file:$SERVER_LOGFILE and file:$APP_LOGFILE"
    echo ""
    $APP_COMMAND > $APP_LOGFILE 2>&1 &
fi  ### DO_APP


### Status
if [ "$DO_STATUS" = "true" ] ; then
    if [ ! -f $SERVER_LOGFILE ] ; then
      echo "Server is not running on this machine."
      exit 0
    else
      good=`head -1 $SERVER_LOGFILE | grep "done!"`
      bad=`head -1 $SERVER_LOGFILE | grep "failed"`
      if [ ! "$bad" = "" ] ; then
        echo "Server is not running on this machine and had errors on launch."
        exit 0
      fi

      if [ ! "$good" = "" ] ; then
        echo "Server is running on this machine."
        echo "You can view the server output here: file: $SERVER_LOGFILE"
      else
        echo "Server is not running on this machine."
      fi
      echo ""
      echo "Output of $SERVER_LOGFILE:"
      cat $SERVER_LOGFILE
    fi

    if [ ! -f $WARMUP_LOGFILE ] ; then
      echo "Warmup of server on this machine has not been done."
    else
      good=`head -1 $WARMUP_LOGFILE | grep "SOURCING"`
      bad=`head -1 $WARMUP_LOGFILE | grep "failed"`
      if [ ! "$bad" = "" ] ; then
        echo "Warmup of server on this machine had errors."
        cat $WARMUP_LOGFILE
        exit 0
      fi

      if [ ! "$good" = "" ] ; then
        echo "Warmup of server on this machine was successful."
      else
        echo "Warmup of server on this machine has not been done."
      fi
      echo ""
      echo "Output of $WARMUP_LOGFILE:"
      cat $WARMUP_LOGFILE
    fi

    if [ -f $APP_LOGFILE ] ; then
      echo ""
      echo "Module: $PRESENTATION module appears to be running."
      echo "Output of $APP_LOGFILE:"
      cat $APP_LOGFILE
    fi
fi

