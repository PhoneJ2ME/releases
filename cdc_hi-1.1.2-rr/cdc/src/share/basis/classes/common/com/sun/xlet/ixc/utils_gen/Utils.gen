/*
 * @(#)Utils.gen	1.2 06/10/03
 *
 * Copyright  1990-2008 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 */


package com.sun.xlet;

import java.io.*;
import java.lang.reflect.Method;

public class Utils {
    public static Serializable deserialize(byte[] serialized0) 
		throws IOException, ClassNotFoundException {
	ObjectInputStream ois 
	    = new ObjectInputStream(new ByteArrayInputStream(serialized0));
	return (Serializable) ois.readObject();
    }

    public static Object findMethod (String cName, String mName, Object[] types)
    {
	try {
	    Class[] clazz = new Class[types.length];
	    for (int i = 0; i < types.length; i++) {
		if (types[i] instanceof Class) {
		    clazz[i] = (Class) types[i];
		} else {
		    clazz[i] = Class.forName((String) types[i]);
		}
	    }
	    return Class.forName(cName).getMethod(mName, clazz);
	} catch (Exception ex) {
	    throw new RuntimeException(ex.toString());
	}
    }
}
