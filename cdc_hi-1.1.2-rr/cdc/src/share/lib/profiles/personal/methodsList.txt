#
# @(#)methodsList.txt	1.15 06/10/25
#
# Copyright  2008  Sun Microsystems, Inc. All rights reserved.
#
java.awt.AWTEvent.consume()
java.awt.AWTEvent.convertToOld()
java.awt.AWTEvent.getID()
java.awt.AWTEvent.<init>(Ljava/lang/Object;I)
java.awt.AWTEvent.isConsumed()
java.awt.BasicStroke.<init>(FIIF[FF)
java.awt.BasicStroke.<init>()
java.awt.Button.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Canvas.postsOldMouseEvents()
java.awt.Checkbox.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Color.darker()
java.awt.Color.getRGB()
java.awt.Color.<init>(III)
java.awt.Color.testColorValueRange(IIII)
java.awt.Component.addNotify()
java.awt.Component.bounds()
java.awt.Component.checkImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
java.awt.Component.coalesceEvents(Ljava/awt/AWTEvent;Ljava/awt/AWTEvent;)
java.awt.Component.contains(II)
java.awt.Component.disable()
java.awt.Component.dispatchEventImpl(Ljava/awt/AWTEvent;)
java.awt.Component.dispatchEvent(Ljava/awt/AWTEvent;)
java.awt.Component.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Component.getCursor()
java.awt.Component.getFont()
java.awt.Component.getGraphics()
java.awt.Component.getHeight()
java.awt.Component.getInputContext()
java.awt.Component.getParent()
java.awt.Component.getToolkit()
java.awt.Component.getTreeLock()
java.awt.Component.getWidth()
java.awt.Component.handleEvent(Ljava/awt/Event;)
java.awt.Component.imageUpdate(Ljava/awt/Image;IIIII)
java.awt.Component.<init>()
java.awt.Component.inside(II)
java.awt.Component.invalidate()
java.awt.Component.isShowing()
java.awt.Component.move(II)
java.awt.Component.paint(Ljava/awt/Graphics;)
java.awt.Component.postEvent(Ljava/awt/Event;)
java.awt.Component.prepareImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
java.awt.Component.processEvent(Ljava/awt/AWTEvent;)
java.awt.Component.processMouseEvent(Ljava/awt/event/MouseEvent;)
java.awt.Component.removeNotify()
java.awt.Component.repaint()
java.awt.Component.repaint(JIIII)
java.awt.Component.repaint()
java.awt.Component.reshape(IIII)
java.awt.Component.setBounds(IIII)
java.awt.Component.update(Ljava/awt/Graphics;)
java.awt.Component.validate()
java.awt.Container.addImpl(Ljava/awt/Component;Ljava/lang/Object;I)
java.awt.Container.add(Ljava/awt/Component;)
java.awt.Container.addNotify()
java.awt.Container.dispatchEventImpl(Ljava/awt/AWTEvent;)
java.awt.Container.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Container.getComponent(I)
java.awt.Container.getCursorTarget(II)
java.awt.Container.getMouseEventTarget(IIZ)
java.awt.Container.invalidate()
java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(Ljava/awt/Container;)
java.awt.Container.paint(Ljava/awt/Graphics;)
java.awt.Container.postsOldMouseEvents()
java.awt.Container.processEvent(Ljava/awt/AWTEvent;)
java.awt.Container.removeAll()
java.awt.Container.removeNotify()
java.awt.Container.update(Ljava/awt/Graphics;)
java.awt.Container.validateTree()
java.awt.Container.validate()
java.awt.DefaultFocusTraversalPolicy.accept(Ljava/awt/Component;)
java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Ljava/awt/Component;)
java.awt.DefaultKeyboardFocusManager.dispatchEvent(Ljava/awt/AWTEvent;)
java.awt.DefaultKeyboardFocusManager.pumpApprovedKeyEvents()
java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(Ljava/awt/Component;Ljava/awt/AWTEvent;)
java.awt.Dialog$1.evaluate()
java.awt.Dimension.<init>(II)
java.awt.event.ComponentEvent.<init>(Ljava/awt/Component;I)
java.awt.EventDispatchThread$1.evaluate()
java.awt.EventDispatchThread.pumpEvents(ILjava/awt/Conditional;)
java.awt.EventDispatchThread.pumpEvents(Ljava/awt/Conditional;)
java.awt.Event.<init>(Ljava/lang/Object;JIIIIILjava/lang/Object;)
java.awt.event.InputEvent.consume()
java.awt.event.InputEvent.getModifiers()
java.awt.event.InputEvent.<init>(Ljava/awt/Component;IJI)
java.awt.event.InputEvent.isConsumed()
java.awt.event.MouseEvent.getX()
java.awt.event.MouseEvent.getY()
java.awt.event.MouseEvent.<init>(Ljava/awt/Component;IJIIIIZI)
java.awt.event.MouseEvent.<init>(Ljava/awt/Component;IJIIIIZ)
java.awt.event.MouseEvent.setNewModifiers()
java.awt.event.PaintEvent.<init>(Ljava/awt/Component;ILjava/awt/Rectangle;)
java.awt.EventQueue.dispatchEvent(Ljava/awt/AWTEvent;)
java.awt.EventQueue.getNextEvent()
java.awt.EventQueue.postEvent(Ljava/awt/AWTEvent;)
java.awt.EventQueue.postEvent(Ljava/awt/AWTEvent;I)
java.awt.EventQueue.postEvent(Ljava/awt/AWTEvent;)
java.awt.EventQueue.postEventPrivate(Ljava/awt/AWTEvent;)
java.awt.EventQueueProxy.dispatchEvent(Ljava/awt/AWTEvent;)
java.awt.EventQueueProxy.getNextEvent()
java.awt.EventQueueProxy.getQueue()
java.awt.EventQueue.removeEvents(Ljava/lang/Class;I)
java.awt.EventQueue.removeSourceEvents(Ljava/lang/Object;)
java.awt.EventQueue.removeSourceEvents(Ljava/lang/Object;Z)
java.awt.EventQueue.setCurrentEventAndMostRecentTimeImpl(Ljava/awt/AWTEvent;)
java.awt.FlowLayout.layoutContainer(Ljava/awt/Container;)
java.awt.FlowLayout.moveComponents(Ljava/awt/Container;IIIIII)
java.awt.FlowLayout.preferredLayoutSize(Ljava/awt/Container;)
java.awt.Font.equals(Ljava/lang/Object;)
java.awt.Font.hashCode()
java.awt.Font.initializeFont(Ljava/util/Hashtable;)
java.awt.Font.<init>(Ljava/lang/String;IILsun/awt/peer/FontPeer;)
java.awt.Font.setFamily()
java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()
java.awt.Graphics.getFontMetrics()
java.awt.GridBagLayout.GetLayoutInfo(Ljava/awt/Container;I)
java.awt.GridBagLayout.lookupConstraints(Ljava/awt/Component;)
java.awt.image.CropImageFilter.addWithoutOverflow(II)
java.awt.image.CropImageFilter.setPixels(IIIILjava/awt/image/ColorModel;[BII)
java.awt.image.DirectColorModel.getAlpha(I)
java.awt.image.DirectColorModel.getBlue(I)
java.awt.image.DirectColorModel.getGreen(I)
java.awt.image.DirectColorModel.getRed(I)
java.awt.image.DirectColorModel.getRGB(I)
java.awt.image.FilteredImageSource.startProduction(Ljava/awt/image/ImageConsumer;)
java.awt.image.IndexColorModel.getRGB(I)
java.awt.image.IndexColorModel.<init>(II[BIZI)
java.awt.ImageMediaEntry.getStatus(ZZ)
java.awt.ImageMediaEntry.imageUpdate(Ljava/awt/Image;IIIII)
java.awt.ImageMediaEntry.parseflags(I)
java.awt.image.RGBImageFilter.filterRGBPixels(IIII[III)
java.awt.image.RGBImageFilter.setPixels(IIIILjava/awt/image/ColorModel;[BII)
java.awt.image.RGBImageFilter.setPixels(IIIILjava/awt/image/ColorModel;[III)
java.awt.KeyboardFocusManager.clearMostRecentFocusOwner(Ljava/awt/Component;)
java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager()
java.awt.KeyboardFocusManager.getCurrentKeyboardFocusManager(Lsun/awt/AppContext;)
java.awt.KeyboardFocusManager.getFocusOwner()
java.awt.KeyboardFocusManager.getGlobalActiveWindow()
java.awt.KeyboardFocusManager.getGlobalFocusedWindow()
java.awt.KeyboardFocusManager.getGlobalFocusOwner()
java.awt.KeyboardFocusManager.getMostRecentFocusOwner(Ljava/awt/Window;)
java.awt.KeyboardFocusManager.getPermanentFocusOwner()
java.awt.KeyboardFocusManager.processCurrentLightweightRequests()
java.awt.KeyboardFocusManager.retargetFocusEvent(Ljava/awt/AWTEvent;)
java.awt.Label.setText(Ljava/lang/String;)
java.awt.LightweightDispatcher.dispatchEvent(Ljava/awt/AWTEvent;)
java.awt.LightweightDispatcher.eventDispatched(Ljava/awt/AWTEvent;)
java.awt.LightweightDispatcher.processMouseEvent(Ljava/awt/event/MouseEvent;)
java.awt.LightweightDispatcher.retargetMouseEvent(Ljava/awt/Component;ILjava/awt/event/MouseEvent;)
java.awt.LightweightDispatcher.trackMouseEnterExit(Ljava/awt/Component;Ljava/awt/event/MouseEvent;)
java.awt.LightweightDispatcher.updateCursor(Ljava/awt/Component;)
java.awt.List.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.MediaEntry.getID()
java.awt.MediaEntry.getStatus(ZZ)
java.awt.MediaEntry.insert(Ljava/awt/MediaEntry;Ljava/awt/MediaEntry;)
java.awt.MediaEntry.setStatus(I)
java.awt.MediaTracker.addImage(Ljava/awt/Image;III)
java.awt.MediaTracker.checkID(IZ)
java.awt.MediaTracker.checkID(IZZ)
java.awt.MediaTracker.isErrorID(I)
java.awt.MediaTracker.setDone()
java.awt.MediaTracker.statusAll(ZZ)
java.awt.MediaTracker.statusID(IZZ)
java.awt.Polygon.addPoint(II)
java.awt.Polygon.calculateBounds([I[II)
java.awt.Rectangle.clone()
java.awt.Rectangle.contains(IIII)
java.awt.Rectangle.contains(II)
java.awt.Rectangle.<init>(IIII)
java.awt.Rectangle.intersection(Ljava/awt/Rectangle;)
java.awt.Rectangle.intersects(Ljava/awt/Rectangle;)
java.awt.Rectangle.union(Ljava/awt/Rectangle;)
java.awt.ScrollPaneAdjustable.setSpan(III)
java.awt.ScrollPaneAdjustable.setValue(I)
java.awt.SentEvent.dispatch()
java.awt.SentEvent.<init>(Ljava/awt/AWTEvent;Lsun/awt/AppContext;)
java.awt.SequencedEvent.dispatch()
java.awt.SequencedEvent.dispose()
java.awt.SequencedEvent.<init>(Ljava/awt/AWTEvent;)
java.awt.TextArea.appendText(Ljava/lang/String;)
java.awt.TextComponent.areInputMethodsEnabled()
java.awt.TextComponent.setText(Ljava/lang/String;)
java.awt.TextField.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Toolkit.getDefaultToolkit()
java.awt.Toolkit.getEventQueue()
java.awt.Toolkit.notifyAWTEventListeners(Ljava/awt/AWTEvent;)
java.awt.Toolkit.removeAWTEventListener(Ljava/awt/event/AWTEventListener;)
java.awt.Toolkit$SelectiveAWTEventListener.eventDispatched(Ljava/awt/AWTEvent;)
java.awt.Window.dispatchEventImpl(Ljava/awt/AWTEvent;)
java.awt.Window.eventEnabled(Ljava/awt/AWTEvent;)
java.awt.Window.getInputContext()
java.awt.Window.getToolkit()
java.awt.Window.isShowing()
java.awt.Window.postEvent(Ljava/awt/Event;)
java.io.BufferedInputStream.available()
java.io.BufferedInputStream.ensureOpen()
java.io.BufferedInputStream.fill()
java.io.BufferedInputStream.mark(I)
java.io.BufferedInputStream.read()
java.io.BufferedInputStream.read1([BII)
java.io.BufferedInputStream.read([BII)
java.io.BufferedInputStream.read()
java.io.BufferedInputStream.reset()
java.io.BufferedOutputStream.flush()
java.io.BufferedOutputStream.write([BII)
java.io.BufferedReader.fill()
java.io.BufferedReader.read()
java.io.BufferedReader.readLine()
java.io.BufferedReader.readLine(Z)
java.io.BufferedWriter.ensureOpen()
java.io.BufferedWriter.flushBuffer()
java.io.BufferedWriter.flush()
java.io.BufferedWriter.write(Ljava/lang/String;II)
java.io.ByteArrayInputStream.close()
java.io.ByteArrayInputStream.read([BII)
java.io.ByteArrayOutputStream.write([BII)
java.io.ByteArrayOutputStream.write(I)
java.io.DataOutputStream.incCount(I)
java.io.DataOutputStream.write([BII)
java.io.DataOutputStream.writeByte(I)
java.io.DataOutputStream.write(I)
java.io.DataOutputStream.writeShort(I)
java.io.DataOutputStream.writeUTF(Ljava/lang/String;Ljava/io/DataOutput;)
java.io.ExpiringCache.cleanup()
java.io.ExpiringCache.entryFor(Ljava/lang/String;)
java.io.ExpiringCache.get(Ljava/lang/String;)
java.io.ExpiringCache.put(Ljava/lang/String;Ljava/lang/String;)
java.io.File.exists()
java.io.File.getName()
java.io.File.<init>(Ljava/lang/String;)
java.io.FileInputStream.<init>(Ljava/io/File;)
java.io.FileNotFoundException.<init>(Ljava/lang/String;Ljava/lang/String;)
java.io.FileOutputStream.write([BII)
java.io.FilePermission$1.run()
java.io.FilePermissionCollection.implies(Ljava/security/Permission;)
java.io.FilePermission.getMask(Ljava/lang/String;)
java.io.FilePermission.init(I)
java.io.FilePermission.<init>(Ljava/lang/String;Ljava/lang/String;)
java.io.FilterInputStream.read()
java.io.InputStreamReader.convertInto([CII)
java.io.InputStreamReader.fill([CII)
java.io.InputStreamReader.inReady()
java.io.InputStreamReader.read([CII)
java.io.ObjectStreamClass.getClassSignature(Ljava/lang/Class;)
java.io.OutputStream.flush()
java.io.OutputStreamWriter.ensureOpen()
java.io.OutputStreamWriter.flushBuffer()
java.io.OutputStreamWriter.flush()
java.io.OutputStreamWriter.write([CII)
java.io.PrintStream.ensureOpen()
java.io.PrintStream.newLine()
java.io.PrintStream.print(Ljava/lang/String;)
java.io.PrintStream.println(Ljava/lang/String;)
java.io.PrintStream.write([BII)
java.io.PrintStream.write(Ljava/lang/String;)
java.io.PrintWriter.newLine()
java.io.PrintWriter.write(Ljava/lang/String;II)
java.io.PushbackInputStream.read([BII)
java.io.StreamTokenizer.nextToken()
java.io.StreamTokenizer.read()
java.io.UnixFileSystem.canonicalize(Ljava/lang/String;)
java.io.UnixFileSystem.getBooleanAttributes(Ljava/io/File;)
java.io.UnixFileSystem.normalize(Ljava/lang/String;)
java.io.UnixFileSystem.parentOrNull(Ljava/lang/String;)
java.io.UnixFileSystem.prefixLength(Ljava/lang/String;)
java.io.UnixFileSystem.resolve(Ljava/io/File;)
java.io.UnixFileSystem.resolve(Ljava/lang/String;Ljava/lang/String;)
java.io.Writer.write(Ljava/lang/String;)
java.lang.Boolean.getBoolean(Ljava/lang/String;)
java.lang.CharacterDataLatin1.digit(CI)
java.lang.CharacterDataLatin1.getProperties(C)
java.lang.CharacterDataLatin1.getType(C)
java.lang.CharacterDataLatin1.isDigit(C)
java.lang.CharacterDataLatin1.isLetterOrDigit(C)
java.lang.CharacterDataLatin1.toLowerCase(C)
java.lang.CharacterDataLatin1.toUpperCase(C)
java.lang.Character.digit(CI)
java.lang.Character.isLetterOrDigit(C)
java.lang.Character.toLowerCase(C)
java.lang.Character.toUpperCase(C)
java.lang.Class.addToLoadingList()
java.lang.Class.checkMemberAccess(ILjava/lang/ClassLoader;)
java.lang.ClassLoader$1.run()
java.lang.ClassLoader.checkCerts(Ljava/lang/String;Ljava/security/CodeSource;)
java.lang.ClassLoader.checkName(Ljava/lang/String;)
java.lang.ClassLoader.checkPackageAccess(Ljava/lang/Class;Ljava/security/ProtectionDomain;)
java.lang.ClassLoader.check()
java.lang.ClassLoader.findLoadedClass(Ljava/lang/String;)
java.lang.ClassLoader.findNative(Ljava/lang/ClassLoader;Ljava/lang/String;)
java.lang.ClassLoader.getPackage(Ljava/lang/String;)
java.lang.ClassLoader.loadBootstrapClass(Ljava/lang/String;)
java.lang.ClassLoader.loadClass(Ljava/lang/String;)
java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)
java.lang.Class.loadSuperClasses()
java.lang.Class.newInstance()
java.lang.Class.onLoadingList(I)
java.lang.Class.removeFromLoadingList()
java.lang.Class.resolveName(Ljava/lang/String;)
java.lang.Class.runStaticInitializers()
java.lang.Class.toString()
java.lang.Integer.appendTo(ILjava/lang/StringBuffer;)
java.lang.Integer.getChars(I[C)
java.lang.Integer.parseInt(Ljava/lang/String;I)
java.lang.Integer.toString(I)
java.lang.Integer.toString(II)
java.lang.Integer.toString(I)
java.lang.Long.toString(JI)
java.lang.Math.abs(D)
java.lang.Math.atan2(DD)
java.lang.Math.cos(D)
java.lang.Math.max(DD)
java.lang.Math.max(II)
java.lang.Math.min(II)
java.lang.Math.random()
java.lang.Math.sin(D)
java.lang.Math.sqrt(D)
java.lang.Object.equals(Ljava/lang/Object;)
java.lang.Object.<init>()
java.lang.Object.wait()
java.lang.ref.Finalizer.access$100(Ljava/lang/ref/Finalizer;)
java.lang.ref.Finalizer.add()
java.lang.ref.Finalizer$FinalizerThread.run()
java.lang.ref.Finalizer.<init>(Ljava/lang/Object;)
java.lang.ref.Finalizer.register(Ljava/lang/Object;)
java.lang.ref.Finalizer.remove()
java.lang.ref.Finalizer.runFinalizer()
java.lang.ref.FinalReference.<init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)
java.lang.reflect.Constructor.toString()
java.lang.reflect.Field.getTypeName(Ljava/lang/Class;)
java.lang.reflect.Method.toString()
java.lang.reflect.Modifier.toString(I)
java.lang.ref.Reference.clear()
java.lang.ref.Reference.get()
java.lang.ref.Reference.<init>(Ljava/lang/Object;)
java.lang.ref.Reference.<init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)
java.lang.ref.Reference.<init>(Ljava/lang/Object;)
java.lang.ref.ReferenceQueue.enqueue(Ljava/lang/ref/Reference;)
java.lang.ref.ReferenceQueue.poll()
java.lang.ref.ReferenceQueue.reallyPoll()
java.lang.ref.ReferenceQueue.remove(J)
java.lang.ref.ReferenceQueue.remove()
java.lang.ref.Reference$ReferenceHandler.run()
java.lang.ref.SoftReference.get()
java.lang.ref.WeakReference.<init>(Ljava/lang/Object;)
java.lang.ref.WeakReference.<init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)
java.lang.ref.WeakReference.<init>(Ljava/lang/Object;)
java.lang.SecurityManager.checkPackageAccess(Ljava/lang/String;)
java.lang.SecurityManager.checkPermission(Ljava/security/Permission;)
java.lang.SecurityManager.checkRead(Ljava/lang/String;)
java.lang.StackTraceElement.toString()
java.lang.StringBuffer.append(C)
java.lang.StringBuffer.append(I)
java.lang.StringBuffer.append(Ljava/lang/Object;)
java.lang.StringBuffer.append(Ljava/lang/String;)
java.lang.StringBuffer.getChars(II[CI)
java.lang.StringBuffer.<init>()
java.lang.StringBuffer.<init>(I)
java.lang.StringBuffer.<init>(Ljava/lang/String;)
java.lang.StringBuffer.<init>()
java.lang.StringBuffer.length()
java.lang.StringBuffer.toString()
java.lang.StringCoding$ConverterSD.decode([BII)
java.lang.StringCoding$ConverterSE.encode([CII)
java.lang.StringCoding.decode([BII)
# removed for checkcast in db
#java.lang.StringCoding.decode(Ljava/lang/String;[BII)
java.lang.StringCoding.deref(Ljava/lang/ThreadLocal;)
java.lang.String.endsWith(Ljava/lang/String;)
java.lang.String.equalsIgnoreCase(Ljava/lang/String;)
java.lang.String.<init>([BII)
java.lang.String.<init>([CII)
java.lang.String.<init>(II[C)
java.lang.String.<init>(Ljava/lang/StringBuffer;)
java.lang.String.lastIndexOf(I)
java.lang.String.lastIndexOf(II)
java.lang.String.length()
java.lang.String.regionMatches(ZILjava/lang/String;II)
java.lang.String.replace(CC)
java.lang.String.startsWith(Ljava/lang/String;)
java.lang.String.startsWith(Ljava/lang/String;I)
java.lang.String.startsWith(Ljava/lang/String;)
java.lang.String.substring(II)
java.lang.String.substring(I)
java.lang.String.toCharArray()
java.lang.String.toLowerCase()
java.lang.String.toLowerCase(Ljava/util/Locale;)
java.lang.String.toString()
java.lang.String.trim()
java.lang.String.valueOf(I)
# removed for bad invokevirtual guess in spec
#java.lang.String.valueOf(Ljava/lang/Object;)
java.lang.System.getProperty(Ljava/lang/String;)
java.lang.System.getSecurityManager()
java.lang.Thread.checkAccess()
java.lang.Thread.isInterrupted()
java.lang.ThreadLocal.access$300(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal.get()
java.lang.ThreadLocal$ThreadLocalMap.access$000(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap$Entry.access$500(Ljava/lang/ThreadLocal$ThreadLocalMap$Entry;)
java.lang.ThreadLocal$ThreadLocalMap.get(Ljava/lang/ThreadLocal;)
java.lang.Thread.setPriority(I)
java.lang.Thread.sleep(J)
java.net.JarURLConnection.<init>(Ljava/net/URL;)
java.net.JarURLConnection.parseSpecs(Ljava/net/URL;)
java.net.PlainSocketImpl.acquireFD()
java.net.PlainSocketImpl.available()
java.net.PlainSocketImpl.isClosedOrPending()
java.net.PlainSocketImpl.isConnectionResetPending()
java.net.PlainSocketImpl.isConnectionReset()
java.net.PlainSocketImpl.releaseFD()
java.net.SocketInputStream.available()
java.net.SocketInputStream.read([BII)
java.net.SocketOutputStream.socketWrite([BII)
java.net.SocketOutputStream.write([BII)
java.net.URLConnection.guessContentTypeFromStream(Ljava/io/InputStream;)
java.net.URL.getHost()
java.net.URL.getURLStreamHandler(Ljava/lang/String;)
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)
java.net.URL.<init>(Ljava/net/URL;Ljava/lang/String;)
java.net.URL.isValidProtocol(Ljava/lang/String;)
java.net.URL.openConnection()
java.net.URL.set(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.net.URLStreamHandler.getHostAddress(Ljava/net/URL;)
java.net.URLStreamHandler.parseURL(Ljava/net/URL;Ljava/lang/String;II)
java.security.AccessControlContext.checkPermission(Ljava/security/Permission;)
java.security.AccessControlContext.getDebug()
java.security.AccessControlContext.<init>([Ljava/security/ProtectionDomain;)
java.security.AccessControlContext.optimize()
java.security.AccessController.checkPermission(Ljava/security/Permission;)
java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;)
java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)
java.security.AccessController.getContext()
java.security.AccessController.getStackAccessControlContext()
java.security.BasicPermission.init(Ljava/lang/String;)
java.security.Permissions.add(Ljava/security/Permission;)
java.security.Permissions.getPermissionCollection(Ljava/security/Permission;Z)
java.security.Permissions.implies(Ljava/security/Permission;)
java.security.Permission.toString()
java.security.Policy.getPolicyNoCheck()
java.text.AttributedCharacterIterator$Attribute.hashCode()
java.text.DateFormat.format(Ljava/util/Date;)
java.text.DateFormatSymbols.initializeData(Ljava/util/Locale;)
java.text.DateFormatSymbols.loadZoneStrings(Ljava/util/Locale;Ljava/util/ResourceBundle;)
java.text.MessageFormat.applyPattern(Ljava/lang/String;)
java.text.SimpleDateFormat.applyPattern(Ljava/lang/String;)
java.text.SimpleDateFormat.compile(Ljava/lang/String;)
java.text.SimpleDateFormat.format(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)
java.text.SimpleDateFormat.format(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/Format$FieldDelegate;)
java.text.SimpleDateFormat.subFormat(IILjava/text/Format$FieldDelegate;Ljava/lang/StringBuffer;)
java.text.SimpleDateFormat.zeroPaddingNumber(IIILjava/lang/StringBuffer;)
java.util.AbstractList.<init>()
java.util.AbstractList$Itr.hasNext()
java.util.AbstractList$Itr.next()
java.util.ArrayList.add(Ljava/lang/Object;)
java.util.ArrayList.contains(Ljava/lang/Object;)
java.util.ArrayList.ensureCapacity(I)
java.util.ArrayList.get(I)
java.util.ArrayList.indexOf(Ljava/lang/Object;)
java.util.ArrayList.RangeCheck(I)
java.util.ArrayList.size()
java.util.ArrayList.toArray([Ljava/lang/Object;)
java.util.BitSet.get(I)
java.util.Calendar.internalGet(I)
java.util.Calendar.internalSet(II)
java.util.Calendar.isSet(I)
java.util.Collections$SynchronizedCollection.iterator()
java.util.Collections$SynchronizedMap.get(Ljava/lang/Object;)
java.util.Collections$SynchronizedMap.put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.EventObject.getSource()
java.util.EventObject.<init>(Ljava/lang/Object;)
java.util.GregorianCalendar.computeFieldsImpl()
java.util.GregorianCalendar.computeFields()
java.util.GregorianCalendar.computeTime()
java.util.GregorianCalendar.timeToFields(JZ)
java.util.HashMap$EntryIterator.next()
java.util.HashMap$HashIterator.hasNext()
java.util.HashMap$HashIterator.nextEntry()
# removed for bad invokevirtual guess in spec
#java.util.HashMap.get(Ljava/lang/Object;)
#java.util.HashMap.hash(Ljava/lang/Object;)
java.util.HashMap.indexFor(II)
java.util.HashMap.<init>(IF)
java.util.HashMap.maskNull(Ljava/lang/Object;)
java.util.HashMap.putAll(Ljava/util/Map;)
java.util.HashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)
java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)
java.util.HashMap.remove(Ljava/lang/Object;)
java.util.HashMap.transfer([Ljava/util/HashMap$Entry;)
java.util.HashSet.add(Ljava/lang/Object;)
java.util.Hashtable.access$500(Ljava/util/Hashtable;)
java.util.Hashtable.clone()
java.util.Hashtable.containsKey(Ljava/lang/Object;)
java.util.Hashtable$Entry.clone()
java.util.Hashtable$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;)
java.util.Hashtable$Enumerator.hasMoreElements()
java.util.Hashtable$Enumerator.hasNext()
java.util.Hashtable$Enumerator.<init>(Ljava/util/Hashtable;IZ)
java.util.Hashtable$Enumerator.next()
java.util.Hashtable$Enumerator.nextElement()
java.util.Hashtable$Enumerator.next()
java.util.Hashtable.getIterator(I)
# Don't precompile Hashtable.get(). It slows down the kBench Hash benchmark
#java.util.Hashtable.get(Ljava/lang/Object;)
java.util.Hashtable.<init>(IF)
java.util.Hashtable.<init>()
java.util.Hashtable$KeySet.iterator()
java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Hashtable.rehash()
java.util.Hashtable.remove(Ljava/lang/Object;)
java.util.jar.Attributes.get(Ljava/lang/Object;)
java.util.jar.Attributes$Name.hashCode()
java.util.jar.Attributes$Name.<init>(Ljava/lang/String;)
java.util.jar.Attributes$Name.isAlpha(C)
java.util.jar.Attributes$Name.isDigit(C)
java.util.jar.Attributes$Name.isValid(C)
java.util.jar.Attributes$Name.isValid(Ljava/lang/String;)
java.util.jar.Attributes.put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)
java.util.jar.JarFile.getEntry(Ljava/lang/String;)
java.util.jar.JarFile.getJarEntry(Ljava/lang/String;)
java.util.jar.Manifest$FastInputStream.readLine([B)
java.util.jar.Manifest$FastInputStream.readLine([BII)
java.util.jar.Manifest.parseName([BI)
java.util.jar.Manifest.read(Ljava/io/InputStream;)
java.util.jar.Manifest.toLower(I)
java.util.LinkedList$ListItr.<init>(Ljava/util/LinkedList;I)
java.util.LinkedList.size()
java.util.ListResourceBundle.handleGetObject(Ljava/lang/String;)
java.util.ListResourceBundle.loadLookup()
java.util.Locale.equals(Ljava/lang/Object;)
java.util.Locale.getDefault()
java.util.Locale.hashCode()
java.util.Properties.getProperty(Ljava/lang/String;)
java.util.Properties.loadConvert(Ljava/lang/String;)
java.util.Properties.load(Ljava/io/InputStream;)
java.util.Properties.saveConvert(Ljava/lang/String;Z)
java.util.PropertyPermissionCollection.add(Ljava/security/Permission;)
java.util.PropertyPermission.getMask(Ljava/lang/String;)
java.util.PropertyPermission.<init>(Ljava/lang/String;Ljava/lang/String;)
java.util.PropertyResourceBundle.handleGetObject(Ljava/lang/String;)
java.util.Random.nextDouble()
java.util.Random.next(I)
java.util.Random.nextLong()
java.util.ResourceBundle.calculateBundleNames(Ljava/lang/String;Ljava/util/Locale;)
java.util.ResourceBundle.findBundle(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/Object;)
java.util.ResourceBundle.getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)
java.util.ResourceBundle.getObject(Ljava/lang/String;)
java.util.ResourceBundle.getStringArray(Ljava/lang/String;)
java.util.ResourceBundle.loadBundle(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Locale;)
java.util.ResourceBundle$LoaderReference.<init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/util/ResourceBundle$ResourceCacheKey;)
java.util.ResourceBundle$ResourceCacheKey.clone()
java.util.ResourceBundle$ResourceCacheKey.equals(Ljava/lang/Object;)
java.util.ResourceBundle$ResourceCacheKey.hashCode()
java.util.ResourceBundle$ResourceCacheKey.setKeyValues(Ljava/lang/ClassLoader;Ljava/lang/String;Ljava/util/Locale;)
java.util.Stack.peek()
java.util.Stack.pop()
java.util.Stack.push(Ljava/lang/Object;)
java.util.StringTokenizer.countTokens()
java.util.StringTokenizer.hasMoreTokens()
java.util.StringTokenizer.nextToken()
java.util.StringTokenizer.scanToken(I)
java.util.StringTokenizer.skipDelimiters(I)
java.util.TaskQueue.fixDown(I)
java.util.TaskQueue.isEmpty()
java.util.TimerThread.mainLoop()
java.util.Vector$1.hasMoreElements()
java.util.Vector$1.<init>(Ljava/util/Vector;)
java.util.Vector$1.nextElement()
java.util.Vector.add(Ljava/lang/Object;)
java.util.Vector.contains(Ljava/lang/Object;)
java.util.Vector.copyInto([Ljava/lang/Object;)
java.util.Vector.elementAt(I)
java.util.Vector.indexOf(Ljava/lang/Object;)
java.util.Vector.indexOf(Ljava/lang/Object;I)
java.util.Vector.isEmpty()
java.util.Vector.removeElementAt(I)
java.util.Vector.removeElement(Ljava/lang/Object;)
java.util.Vector.size()
java.util.WeakHashMap.expungeStaleEntries()
java.util.WeakHashMap.get(Ljava/lang/Object;)
java.util.WeakHashMap.getTable()
java.util.WeakHashMap.indexFor(II)
java.util.WeakHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.WeakHashMap.transfer([Ljava/util/WeakHashMap$Entry;[Ljava/util/WeakHashMap$Entry;)
java.util.zip.Inflater.finished()
java.util.zip.Inflater.inflate([BII)
java.util.zip.InflaterInputStream.available()
java.util.zip.InflaterInputStream.read([BII)
java.util.zip.Inflater.needsDictionary()
java.util.zip.Inflater.needsInput()
java.util.zip.Inflater.setInput([BII)
java.util.zip.ZipFile$1.close()
java.util.zip.ZipFile$1.fill()
java.util.zip.ZipFile.access$100(Ljava/util/zip/ZipFile;)
java.util.zip.ZipFile.getEntry(Ljava/lang/String;)
java.util.zip.ZipFile$ZipFileInputStream.close()
java.util.zip.ZipFile$ZipFileInputStream.read([BII)
java.util.zip.ZipInputStream.get16([BI)
java.util.zip.ZipInputStream.get32([BI)
java.util.zip.ZipInputStream.getUTF8String([BII)
java.util.zip.ZipInputStream.readEnd(Ljava/util/zip/ZipEntry;)
java.util.zip.ZipInputStream.readLOC()
sun.applet.AppletAudioClip.play()
sun.applet.AppletClassLoader.loadClass(Ljava/lang/String;Z)
sun.applet.AppletMessageHandler.getQualifiedKey(Ljava/lang/String;)
sun.applet.AppletSecurity$1.run()
sun.applet.AppletSecurity.checkAccess(Ljava/lang/Thread;)
sun.applet.AppletSecurity.checkPackageAccess(Ljava/lang/String;)
sun.applet.AppletSecurity.currentAppletClassLoader()
sun.applet.AppletSecurity.inThreadGroup(Ljava/lang/ThreadGroup;)
sun.applet.AppletViewer.parse(Ljava/net/URL;Ljava/io/PrintStream;Lsun/applet/AppletViewerFactory;)
sun.applet.AppletViewer.printTag(Ljava/io/PrintStream;Ljava/util/Hashtable;)
sun.applet.AppletViewer.scanIdentifier(Ljava/io/Reader;)
sun.applet.AppletViewer.scanTag(Ljava/io/Reader;)
sun.audio.AudioDevice.mix()
sun.audio.AudioDevice.play()
sun.audio.AudioDevice.waitForData()
sun.awt.AppContext.getAppContext()
sun.awt.AppContext.get(Ljava/lang/Object;)
sun.awt.image.ByteArrayImageSource.checkSecurity(Ljava/lang/Object;Z)
sun.awt.image.FetcherInfo.getFetcherInfo()
sun.awt.image.FileImageSource.checkSecurity(Ljava/lang/Object;Z)
sun.awt.image.GifImageDecoder.parseImage(IIIIZI[B[BLjava/awt/image/IndexColorModel;)
sun.awt.image.GifImageDecoder.readBytes([BII)
sun.awt.image.GifImageDecoder.sendPixels(IIII[BLjava/awt/image/ColorModel;)
sun.awt.image.Image.addInfo(I)
sun.awt.image.Image.addWatcher(Ljava/awt/image/ImageObserver;Z)
sun.awt.image.Image.check(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageConsumerQueue.<init>(Lsun/awt/image/InputStreamImageSource;Ljava/awt/image/ImageConsumer;)
sun.awt.image.ImageConsumerQueue.isConsumer(Lsun/awt/image/ImageConsumerQueue;Ljava/awt/image/ImageConsumer;)
sun.awt.image.ImageConsumerQueue.removeConsumer(Lsun/awt/image/ImageConsumerQueue;Ljava/awt/image/ImageConsumer;Z)
sun.awt.image.ImageDecoder.nextConsumer(Lsun/awt/image/ImageConsumerQueue;)
sun.awt.image.ImageDecoder.setPixels(IIIILjava/awt/image/ColorModel;[BII)
sun.awt.image.ImageDecoder.setPixels(IIIILjava/awt/image/ColorModel;[III)
sun.awt.image.ImageFetcher.fetchloop()
sun.awt.image.ImageFetcher.isFetcher(Ljava/lang/Thread;)
sun.awt.image.ImageFetcher.nextImage()
sun.awt.image.ImageFetcher.stoppingAnimation(Ljava/lang/Thread;)
sun.awt.image.Image.getHeight(Ljava/awt/image/ImageObserver;)
sun.awt.image.Image.getImageRep()
sun.awt.image.Image.getSource()
sun.awt.image.Image.getWidth(Ljava/awt/image/ImageObserver;)
sun.awt.image.Image.hasError()
sun.awt.image.ImageRepresentation.checkConsumption()
sun.awt.image.ImageRepresentation.check(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageRepresentation.drawImage(Ljava/awt/Graphics;IILjava/awt/Color;Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageRepresentation.drawStretchImage(Ljava/awt/Graphics;IIIIIIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageRepresentation.imageComplete(I)
sun.awt.image.ImageRepresentation.prepare(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageRepresentation.removeWatcher(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageRepresentation.setColorModel(Ljava/awt/image/ColorModel;)
sun.awt.image.ImageRepresentation.setDimensions(II)
sun.awt.image.ImageRepresentation.setPixels(IIIILjava/awt/image/ColorModel;[BII)
sun.awt.image.ImageRepresentation.setPixels(IIIILjava/awt/image/ColorModel;[III)
sun.awt.image.ImageWatched.addWatcher(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageWatched.isWatcher(Ljava/awt/image/ImageObserver;)
sun.awt.image.ImageWatched.newInfo(Ljava/awt/Image;IIIII)
sun.awt.image.ImageWatched.removeWatcher(Ljava/awt/image/ImageObserver;)
sun.awt.image.InputStreamImageSource.addConsumer(Ljava/awt/image/ImageConsumer;Z)
sun.awt.image.InputStreamImageSource.doFetch()
sun.awt.image.InputStreamImageSource.doneDecoding(Lsun/awt/image/ImageDecoder;)
sun.awt.image.InputStreamImageSource.getDecoder(Ljava/io/InputStream;)
sun.awt.image.InputStreamImageSource.latchConsumers(Lsun/awt/image/ImageDecoder;)
sun.awt.image.InputStreamImageSource.removeConsumer(Ljava/awt/image/ImageConsumer;)
sun.awt.image.InputStreamImageSource.setDecoder(Lsun/awt/image/ImageDecoder;)
#sun.awt.image.PixelStore.reconstitute()
#sun.awt.image.PixelStore.recordPixels(IIII)
#sun.awt.image.PixelStore.setPixels(IIII[BII)
#sun.awt.image.PixelStore.setPixels(IIII[III)
sun.awt.image.PNGFilterInputStream.read([BII)
sun.awt.image.PNGImageDecoder.filterRow([B[BIII)
sun.awt.image.PNGImageDecoder.getInt(I)
sun.awt.image.PNGImageDecoder.produceImage()
sun.awt.image.PNGImageDecoder.sendPixels(IIII[BII)
sun.awt.image.PNGImageDecoder.sendPixels(IIII[III)
sun.awt.image.PNGImageDecoder.update_crc(I[BII)
sun.awt.image.URLImageSource.checkSecurity(Ljava/lang/Object;Z)
sun.awt.image.URLImageSource.getConnection()
sun.awt.image.URLImageSource.getDecoder()
sun.awt.image.URLImageSource.<init>(Ljava/net/URL;)
sun.awt.im.InputContext.dispatchEvent(Ljava/awt/AWTEvent;)
sun.awt.im.InputContext.getInputMethod()
sun.awt.LightweightPeer.handleEvent(Ljava/awt/AWTEvent;)
sun.awt.PeerBasedToolkit.getNativeContainer(Ljava/awt/Component;)
sun.awt.PostEventQueue.run()
sun.awt.qt.QtComponentPeer.addRepaintArea(IIII)
sun.awt.qt.QtComponentPeer.getGraphics()
sun.awt.qt.QtComponentPeer.getToolkit()
sun.awt.qt.QtComponentPeer.handleEvent(Ljava/awt/AWTEvent;)
#sun.awt.qt.QtComponentPeer.postFocusEvent(IZ)
sun.awt.qt.QtComponentPeer.postMouseEvent(IJIIIIZI)
sun.awt.qt.QtComponentPeer.postPaintEvent(IIII)
sun.awt.qt.QtComponentPeer.repaint(JIIII)
sun.awt.qt.QtComponentPeer.setBounds(IIII)
sun.awt.qt.QtComponentPeer.updateClient(Ljava/lang/Object;)
sun.awt.qt.QtFontPeer.getFontPeer(Ljava/awt/Font;)
sun.awt.qt.QtFontPeer.stringWidth(Ljava/lang/String;)
sun.awt.qt.QtGraphics.clipRect(IIII)
sun.awt.qt.QtGraphics.clone()
sun.awt.qt.QtGraphics.constrain(IIII)
sun.awt.qt.QtGraphics.create()
sun.awt.qt.QtGraphics.createFromComponent(Lsun/awt/qt/QtComponentPeer;)
sun.awt.qt.QtGraphics.create()
sun.awt.qt.QtGraphicsDevice.getDefaultConfiguration()
sun.awt.qt.QtGraphics.dispose()
sun.awt.qt.QtGraphics.drawChars([CIIII)
sun.awt.qt.QtGraphics.drawImage(Ljava/awt/Image;IIIIIIIILjava/awt/image/ImageObserver;)
sun.awt.qt.QtGraphics.drawImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
sun.awt.qt.QtGraphics.drawLine(IIII)
sun.awt.qt.QtGraphics.drawRect(IIII)
sun.awt.qt.QtGraphics.drawString(Ljava/lang/String;II)
sun.awt.qt.QtGraphicsEnvironment.getAvailableFontFamilyNames()
sun.awt.qt.QtGraphicsEnvironment.getDefaultScreenDevice()
sun.awt.qt.QtGraphics.fillOval(IIII)
sun.awt.qt.QtGraphics.fillPolygon([I[II)
sun.awt.qt.QtGraphics.fillRect(IIII)
sun.awt.qt.QtGraphics.finalize()
sun.awt.qt.QtGraphics.getClipBounds()
sun.awt.qt.QtGraphics.getFontMetrics(Ljava/awt/Font;)
sun.awt.qt.QtGraphics.<init>(Lsun/awt/qt/QtComponentPeer;)
#sun.awt.qt.QtGraphics.<init>(Lsun/awt/qt/QtGraphics;)
sun.awt.qt.QtGraphics.setColor(Ljava/awt/Color;)
sun.awt.qt.QtGraphics.setComposite(Ljava/awt/Composite;)
sun.awt.qt.QtGraphics.setFont(Ljava/awt/Font;)
sun.awt.qt.QtGraphics.setupApproximatedAlpha()
sun.awt.qt.QtGraphics.setupClip()
sun.awt.qt.QtGraphics.translate(II)
sun.awt.qt.QtImageDecoder.imageComplete(IIZ)
sun.awt.qt.QtImageDecoder.imageComplete(IZ)
sun.awt.qt.QtImageDecoder.produceImage()
sun.awt.qt.QtImageDecoder.sendPixels([BI)
sun.awt.qt.QtImageDecoder.sendPixels([II)
sun.awt.qt.QtImageDecoder.setPixels(IIIILjava/awt/image/ColorModel;[BII)
sun.awt.qt.QtImageDecoder.setPixels(IIIILjava/awt/image/ColorModel;[III)
sun.awt.qt.QtImage.draw(Lsun/awt/qt/QtGraphics;IIIIIIIILjava/awt/image/ImageObserver;)
sun.awt.qt.QtImage.draw(Lsun/awt/qt/QtGraphics;IILjava/awt/image/ImageObserver;)
sun.awt.qt.QtImage.getImageRep()
sun.awt.qt.QtLabelPeer.setText(Ljava/lang/String;)
sun.awt.qt.QtPanelPeer.add(Lsun/awt/qt/QtComponentPeer;)
sun.awt.qt.QtTextComponentPeer.postTextEvent()
sun.awt.qt.QtTextComponentPeer.setText(Ljava/lang/String;)
sun.awt.qt.QtToolkit.checkScrImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
sun.awt.qt.QtToolkit.getFontMetrics(Ljava/awt/Font;)
sun.awt.qt.QtToolkit.getFontPeer(Ljava/awt/Font;)
sun.awt.qt.QtToolkit.postEvent(Ljava/awt/AWTEvent;)
sun.awt.qt.QtToolkit.postEvent(Lsun/awt/AppContext;Ljava/awt/AWTEvent;)
sun.awt.qt.QtToolkit.prepareImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
sun.awt.qt.QtToolkit.prepareScrImage(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)
sun.awt.qt.QtWindowPeer.postMouseEvent(IJIIIIZI)
sun.awt.qt.QtWindowPeer.postMovedEvent()
sun.awt.ScreenUpdater.nextEntry()
sun.awt.ScreenUpdater.notify(Lsun/awt/UpdateClient;J)
sun.awt.ScreenUpdater.notify(Lsun/awt/UpdateClient;JLjava/lang/Object;)
sun.awt.ScreenUpdater.notify(Lsun/awt/UpdateClient;J)
sun.awt.ScreenUpdater.run()
sun.awt.SunToolkit.createImage(Ljava/net/URL;)
sun.awt.SunToolkit.getSystemEventQueueImpl()
sun.awt.SunToolkit.targetToAppContext(Ljava/lang/Object;)
sun.io.ByteToCharASCII.convert([BII[CII)
sun.io.ByteToCharISO8859_1.flush([CII)
sun.io.ByteToCharISO8859_1.reset()
sun.io.ByteToCharUTF8.convert([BII[CII)
sun.io.CharToByteASCII.convert([CII[BII)
sun.io.CharToByteASCII.flush([BII)
sun.io.CharToByteConverter.convertAny([CII[BII)
# removed for checkcast in db
#sun.io.CharToByteConverter.flushAny([BII)
sun.io.CharToByteISO8859_1.flush([BII)
sun.io.Converters.getDefaultEncodingName()
sun.misc.Launcher$AppClassLoader.defineClassPrivate(Ljava/lang/String;Lsun/misc/Launcher$ClassContainer;)
sun.misc.Launcher$AppClassLoader.handlePackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)
sun.misc.Launcher$AppClassLoader.isSealedPrivate(Ljava/lang/String;Ljava/util/jar/Manifest;)
sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)
sun.misc.ProxyGenerator$ConstantPool.getClass(Ljava/lang/String;)
sun.misc.ProxyGenerator$ConstantPool.getIndirect(Lsun/misc/ProxyGenerator$ConstantPool$IndirectEntry;)
sun.misc.ProxyGenerator$ConstantPool.getNameAndType(Ljava/lang/String;Ljava/lang/String;)
sun.misc.ProxyGenerator$ConstantPool.getUtf8(Ljava/lang/String;)
sun.misc.ProxyGenerator$ConstantPool.getValue(Ljava/lang/Object;)
sun.misc.ProxyGenerator$ConstantPool$IndirectEntry.equals(Ljava/lang/Object;)
sun.misc.ProxyGenerator$ConstantPool$IndirectEntry.hashCode()
sun.misc.ProxyGenerator$ConstantPool$IndirectEntry.write(Ljava/io/DataOutputStream;)
sun.misc.ProxyGenerator$ConstantPool$ValueEntry.write(Ljava/io/DataOutputStream;)
sun.misc.ProxyGenerator$ConstantPool.write(Ljava/io/OutputStream;)
sun.misc.ProxyGenerator$MethodInfo.write(Ljava/io/DataOutputStream;)
sun.misc.ProxyGenerator$ProxyMethod.generateMethod()
sun.misc.Ref.check()
sun.misc.Ref.flush()
sun.misc.Ref.get()
sun.misc.Ref.setThing(Ljava/lang/Object;)
sun.misc.SoftCache.get(Ljava/lang/Object;)
sun.misc.SoftCache.processQueue()
sun.misc.SoftCache.put(Ljava/lang/Object;Ljava/lang/Object;)
sun.misc.ThreadRegistry.add(Ljava/lang/Thread;)
sun.misc.ThreadRegistry.exitRequested()
sun.misc.ThreadRegistry.remove(Ljava/lang/Thread;)
sun.misc.URLClassPath.check(Ljava/net/URL;)
sun.misc.URLClassPath$FileLoader.getResource(Ljava/lang/String;Z)
sun.misc.URLClassPath.getLoader(I)
sun.misc.URLClassPath.getResource(Ljava/lang/String;Z)
sun.misc.URLClassPath$JarLoader.getResource(Ljava/lang/String;Z)
sun.net.www.http.ChunkedInputStream.ensureOpen()
sun.net.www.http.ChunkedInputStream.ensureRawAvailable(I)
sun.net.www.http.ChunkedInputStream.processRaw()
sun.net.www.http.ChunkedInputStream.readAheadBlocking()
sun.net.www.http.ChunkedInputStream.read([BII)
sun.net.www.http.ChunkedInputStream.read()
sun.net.www.MessageHeader.add(Ljava/lang/String;Ljava/lang/String;)
sun.net.www.MessageHeader.findValue(Ljava/lang/String;)
sun.net.www.MessageHeader.grow()
sun.net.www.MessageHeader.<init>()
sun.net.www.MessageHeader.mergeHeader(Ljava/io/InputStream;)
sun.net.www.MessageHeader.print(Ljava/io/PrintStream;)
sun.net.www.MimeTable.fill(Lsun/net/www/MimeEntry;Ljava/lang/String;Ljava/lang/String;)
sun.net.www.MimeTable.findByFileName(Ljava/lang/String;)
sun.net.www.MimeTable.parse(Ljava/lang/String;Ljava/lang/String;)
sun.net.www.MimeTable.parse(Ljava/lang/String;Lsun/net/www/MimeEntry;)
sun.net.www.ParseUtil.canonizeString(Ljava/lang/String;)
sun.net.www.ParseUtil.decode(Ljava/lang/String;)
sun.net.www.ParseUtil.encodePath(Ljava/lang/String;)
sun.net.www.protocol.file.FileURLConnection.getPermission()
sun.net.www.protocol.file.Handler.openConnection(Ljava/net/URL;)
sun.net.www.protocol.file.Handler.parseURL(Ljava/net/URL;Ljava/lang/String;II)
sun.net.www.protocol.jar.Handler.openConnection(Ljava/net/URL;)
sun.net.www.protocol.jar.Handler.parseContextSpec(Ljava/net/URL;Ljava/lang/String;)
sun.net.www.protocol.jar.Handler.parseURL(Ljava/net/URL;Ljava/lang/String;II)
sun.net.www.protocol.jar.JarFileFactory.getCachedJarFile(Ljava/net/URL;)
sun.net.www.protocol.jar.JarFileFactory.getConnection(Ljava/util/jar/JarFile;)
sun.net.www.protocol.jar.JarURLConnection.getPermission()
sun.net.www.protocol.jar.JarURLConnection.<init>(Ljava/net/URL;Lsun/net/www/protocol/jar/Handler;)
#
#Warning: Don't recompile Warmup methods. First, precompiling
#         Warmup methods doesn't help applications. Second,
#         it can cause bad code being generated for these
#         methods.
#
#sun.mtask.Warmup.getClassFromName(Ljava/lang/String;Z)
#sun.mtask.Warmup.parseAndPrecompileMethods(Ljava/lang/String;)
#sun.mtask.Warmup.parseArglist(Ljava/lang/String;)
#sun.mtask.Warmup.parseMethod(Ljava/lang/String;)
#sun.mtask.Warmup.processClasses(Ljava/io/BufferedReader;)
#sun.mtask.Warmup.processPrecompilation(Ljava/io/BufferedReader;)
#sun.mtask.Warmup.readElements(Ljava/io/BufferedReader;)
sun.mtask.xlet.PXletRunner
#sun.mtask.xlet.PXletRunnerJS:
sun.security.provider.PolicyFile.implies(Ljava/security/ProtectionDomain;Ljava/security/Permission;)
sun.security.provider.PolicyParser.match(Ljava/lang/String;)
sun.security.provider.PolicyParser.peek(Ljava/lang/String;)
sun.text.resources.DateFormatZoneData$1.hasMoreElements()
sun.text.resources.DateFormatZoneData$1.nextElement()
sun.text.resources.DateFormatZoneData.handleGetObject(Ljava/lang/String;)
sun.text.resources.DateFormatZoneData.loadLookup()
sun.util.calendar.ZoneInfo.getOffsets(J[IZ)
sun.util.calendar.ZoneInfo.getTransitionIndex(JZ)
