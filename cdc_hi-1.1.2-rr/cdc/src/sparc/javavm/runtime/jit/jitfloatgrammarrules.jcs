//
// Copyright  1990-2008 Sun Microsystems, Inc. All Rights Reserved.  
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER  
//   
// This program is free software; you can redistribute it and/or  
// modify it under the terms of the GNU General Public License version  
// 2 only, as published by the Free Software Foundation.   
//   
// This program is distributed in the hope that it will be useful, but  
// WITHOUT ANY WARRANTY; without even the implied warranty of  
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU  
// General Public License version 2 for more details (a copy is  
// included at /legal/license.txt).   
//   
// You should have received a copy of the GNU General Public License  
// version 2 along with this work; if not, write to the Free Software  
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  
// 02110-1301 USA   
//   
// Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa  
// Clara, CA 95054 or visit www.sun.com if you need additional  
// information or have any questions. 
//
// @(#)jitfloatgrammarrules.jcs	1.10 06/10/10
//
//
// Optional floating-point grammar rules for
// RISC processors having floating-point hardware.
// 
// Unfortunately, these operations are not done uniformly
// between processors, so we must place them in processor-specific
// files.

//
// To move values between float and int registers, SPARC must
// move through the temp area. Some processor can do better.
//

%{
static void
moveIntToFPRegs(
    CVMJITCompilationContext* con,
    CVMJITIRNodePtr thisNode,
    CVMRMregset target,
    CVMRMregset avoid)
{
    CVMRMResource* src = popResource(con);
    CVMRMResource* dest;
    dest = CVMRMcloneResource(CVMRM_INT_REGS(con), src,
			      CVMRM_FP_REGS(con), target, avoid);
    CVMRMrelinquishResource(CVMRM_INT_REGS(con), src);
    /*
     * unpin without occupying
     * to occupy would cause big trouble if the thing is an
     * IDENT.
     */
    CVMRMunpinResource(CVMRM_FP_REGS(con), dest);
    pushResource(con, dest);
}

static void
moveFPToIntRegs(
    CVMJITCompilationContext* con,
    CVMJITIRNodePtr thisNode,
    CVMRMregset target,
    CVMRMregset avoid)
{
    CVMRMResource* src = popResource(con);
    CVMRMResource* dest;
    /* will cloneResource pin or not? Yes */
    dest = CVMRMcloneResource(CVMRM_FP_REGS(con), src, CVMRM_INT_REGS(con),
			      target, avoid);
    CVMRMrelinquishResource(CVMRM_FP_REGS(con), src);
    /*
     * unpin without occupying
     * to occupy would cause big trouble if the thing is an
     * FIDENT.
     */
    CVMRMunpinResource(CVMRM_INT_REGS(con), dest);
    pushResource(con, dest);
}
%}

reg32: freg32 : 20  : : : :
    moveFPToIntRegs(con, $$, GET_REGISTER_GOALS);

freg32: reg32 : 20  : : : : 
    moveIntToFPRegs(con, $$, GET_FLOAT_REGISTER_GOALS);

reg64: freg64 : 20  : : : :
    moveFPToIntRegs(con, $$, GET_REGISTER_GOALS);

freg64: reg64 : 20  : : : :
    moveIntToFPRegs(con, $$, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueFloat = (float)valueInt.
freg32: I2F freg32 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_I2F_OPCODE, $$, 1, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueInt = (int)valueFloat.
freg32: F2I freg32 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_F2I_OPCODE, $$, 1, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueDouble = (double)valueInt.
freg64: I2D freg32 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_I2D_OPCODE, $$, 2, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueInt = (int)valueDouble.
freg32: D2I freg64 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_D2I_OPCODE, $$, 1, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueDouble = (double)valueFloat.
freg64: F2D freg32 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_F2D_OPCODE, $$, 2, GET_FLOAT_REGISTER_GOALS);

// Purpose: valueFloat = (float)valueDouble.
freg32: D2F freg64 : 10 : : : :
    floatUnaryOp(con,  CVMSPARC_D2F_OPCODE, $$, 1, GET_FLOAT_REGISTER_GOALS);

//
// comparing floating-point values for integer result -1, 0, 1
//
%{
/*
 * emit this pattern
 *	fcmp	%f1, %f2
 *	nop
 *	fbg,a	1f
 *	mov	%dest, #1
 *	fbl,a	1f
 *	mov	%dest, #-1
 *	mov	%dest, %g0
 *  1:
 * Where the branch instructions are modified by the unorderedMod.
 */
static void
fcompareResult(
    CVMJITCompilationContext* con, 
    CVMJITIRNodePtr thisNode,
    int cmpop,
    int unorderedMod,
    CVMRMregset target,
    CVMRMregset avoid)
{
    CVMRMResource* rhs = popResource(con);
    CVMRMResource* lhs = popResource(con);
    CVMRMResource* dest = CVMRMgetResource(CVMRM_INT_REGS(con), target, avoid,
					   1);
    int	           destRegno = CVMRMgetRegisterNumber(dest);
    CVMInt32       fixupPC[2];
    CVMInt32	   targetPC;

    CVMRMpinResource(CVMRM_FP_REGS(con), lhs,
		     CVMRM_FP_ANY_SET, CVMRM_EMPTY_SET);
    CVMRMpinResource(CVMRM_FP_REGS(con), rhs,
		     CVMRM_FP_ANY_SET, CVMRM_EMPTY_SET);

    CVMCPUemitFCompare(con, cmpop, CVMCPU_COND_FEQ | unorderedMod, 
	CVMRMgetRegisterNumber(lhs), CVMRMgetRegisterNumber(rhs));

    fixupPC[0] = CVMJITcbufGetLogicalPC(con);
    CVMSPARCemitBranch(con, 0, CVMCPU_COND_FGT | unorderedMod, CVM_TRUE);
    CVMCPUemitMove(con, CVMCPU_MOV_OPCODE, destRegno, 
	CVMSPARCalurhsEncodeConstantToken(1), CVM_FALSE);

    fixupPC[1] = CVMJITcbufGetLogicalPC(con);
    CVMSPARCemitBranch(con, 0, CVMCPU_COND_FLT | unorderedMod, CVM_TRUE);
    CVMCPUemitMove(con, CVMCPU_MOV_OPCODE, destRegno, 
	CVMSPARCalurhsEncodeConstantToken(-1), CVM_FALSE);

    CVMCPUemitMove(con, CVMCPU_MOV_OPCODE, destRegno, 
	CVMSPARCalurhsEncodeConstantToken(0), CVM_FALSE);

    targetPC = CVMJITcbufGetLogicalPC(con);
    CVMJITfixupAddress(con, fixupPC[0], targetPC,
		       CVMJIT_COND_BRANCH_ADDRESS_MODE);
    CVMJITfixupAddress(con, fixupPC[1], targetPC,
		       CVMJIT_COND_BRANCH_ADDRESS_MODE);

    CVMRMrelinquishResource(CVMRM_FP_REGS(con), lhs);
    CVMRMrelinquishResource(CVMRM_FP_REGS(con), rhs);
    CVMRMoccupyAndUnpinResource(CVMRM_INT_REGS(con), dest, thisNode);
    pushResource(con, dest);
}

%}

reg32: FCMPL freg32 freg32 : 40 : : : : 
    fcompareResult(con, $$, CVMCPU_FCMP_OPCODE, CVMCPU_COND_UNORDERED_LT,
		   GET_REGISTER_GOALS);

reg32: FCMPG freg32 freg32 : 40 : : : : 
    fcompareResult(con, $$, CVMCPU_FCMP_OPCODE, 0,
		   GET_REGISTER_GOALS);

reg32: DCMPL freg64 freg64 : 40 : : : : 
    fcompareResult(con, $$, CVMCPU_DCMP_OPCODE, CVMCPU_COND_UNORDERED_LT,
		   GET_REGISTER_GOALS);

reg32: DCMPG freg64 freg64 : 40 : : : : 
    fcompareResult(con, $$, CVMCPU_DCMP_OPCODE, 0,
		   GET_REGISTER_GOALS);
