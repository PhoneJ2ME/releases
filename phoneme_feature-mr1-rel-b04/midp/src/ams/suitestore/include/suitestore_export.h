/*
 *
 * Copyright  1990-2006 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation. 
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt). 
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA 
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions. 
 */

/**
 * @file
 *
 * This header file is interface to the internal MIDlet suite storage
 * functions.
 */

#ifndef _SUITESTORE_EXPORT_H_
#define _SUITESTORE_EXPORT_H_

#include <kni.h>
#include <midpString.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * The information generated by install the suite installation process.
 */
typedef struct _MidpInstallInfo {
    /**
     * Creation status: 
     *        0 success,
     *        OUT_OF_MEM_LEN if out of memory,
     *        IO_ERROR_LEN if an IO error occurred
     */
    int status;
    /** the absolute URL where the JAD came from, can be null. */
    pcsl_string jadUrl_s;
    /** the absolute URL where the JAR came from. */
    pcsl_string jarUrl_s;
    /** security domain of the suite */
    pcsl_string domain_s;
    /** true if suite is trusted, false if not */
    jboolean trusted;
    /**
     * if signed, the Certificate Authorization path, begining with the
     * most trusted entity, that authorized it
     */
    pcsl_string* authPath_as;
    /** length of the authorization path */
    jint authPathLen;
    /** suite hash for the suites with preverified classes */
    jbyte *pVerifyHash;
    /** suite hash length */
    int verifyHashLen;
} MidpInstallInfo;

/** A list of properties that can be searched by a key. */
typedef struct _Properties {
    /**
     * Number of properties, there are 2 Strings (key/value)
     * for each property
     */
    int numberOfProperties;
    /**
     * Creation status: 
     *        0 success,
     *        OUT_OF_MEM_LEN if out of memory,
     *        IO_ERROR_LEN if an IO error occurred
     */
    int status;
    pcsl_string* pStringArr;
} MidpProperties;

/** Application property name constants. */
extern const pcsl_string SUITE_NAME_PROP;
extern const pcsl_string SUITE_VENDOR_PROP;
extern const pcsl_string SUITE_VERSION_PROP;
extern const pcsl_string SUITE_DESC_PROP;

/**
 * Get the list installed of MIDlet suite IDs.
 *
 * @param ppSuites empty array of strings to fill with suite IDs
 *
 * @returns number of suites (can be 0),
 *          OUT_OF_MEM_LEN if for out of memory,
 *          IO_ERROR_LEN if an IO error
 */
int midpGetSuiteIDs(pcsl_string** ppSuites);

/**
 * Frees a list of suite IDs.
 *
 * @param pSuites point to an array of suites
 * @param numberOfSuites number of elements in pSuites
 */
void midpFreeSuiteIDs(pcsl_string* pSuites, int numberOfSuites);

/**
 * Gets the amount of storage on the device that this suite is using.
 * This includes the JAD, JAR, management data, and RMS.
 *
 * @param suiteID  ID of the suite
 *
 * @return number of bytes of storage the suite is using or less than
 * 0 if out of memory
 */
long midp_get_suite_storage_size(const pcsl_string* suiteID);

/**
 * Disables a suite given its suite ID.
 * <p>
 * The method does not stop the suite if is in use. However any future
 * attepts to run a MIDlet from this suite while disabled should fail.
 *
 * @param suiteID  ID of the suite
 *
 * @return MIDP_ERROR_AMS_SUITE_NOT_FOUND if the suite does not exist,
 *          SUITE_LOCKED if the suite is locked
 */
int midpDisableSuite(const pcsl_string* suiteID);

/**
 * Enables a suite given its suite ID.
 * <p>
 * The method does update an suites that are currently loaded for
 * settings or of application management purposes.
 *
 * @param suiteID  ID of the suite
 *
 * @return 0 if the suite does not exist SUITE_LOCKED if the 
 * suite is locked
 */
int midpEnableSuite(const pcsl_string* suiteID);

/**
 * Removes a software package given its suite ID
 * <p>
 * If the component is in use it must continue to be available
 * to the other components that are using it.  The resources it
 * consumes must not be released until it is not in use.
 *
 * @param suiteID  ID of the suite
 *
 * @return 0 if the suite does not exist SUITE_LOCKED if the 
 * suite is locked
 */
int midp_remove_suite(const pcsl_string* suiteID);

/**
 * Gets the install information of a MIDlet suite.
 *
 * @param suiteID  ID of the suite
 *
 * @return Installation information, use status macros to check the result
 * A SUITE_CORRUPTED_ERROR is returned as a status in InstallInfo 
 * when suite is corrupted
 */
MidpInstallInfo midp_get_suite_install_info(const pcsl_string* suiteID);

/**
 * Frees an InstallInfo struct. Does nothing if passed NULL.
 *
 * @param info installation information returned from readInstallInfo.
 */
void midpFreeInstallInfo(MidpInstallInfo info);

/**
 * Gets the properties of a MIDlet suite to persistent storage.
 * <pre>
 * The format of the properties file will be:
 * <number of strings as int (2 strings per property)>
 *    {repeated for each property}
 *    <length of a property key as int>
 *    <property key as jchars>
 *    <length of property value as int>
 *    <property value as jchars>
 * </pre>
 * @param suiteID  ID of the suite
 *
 * @return properties in a pair pattern of key and value,
 * use the status macros to check the result. A SUITE_CORRUPTED_ERROR
 * is returned as a status of MidpProperties when suite is corrupted
 */
MidpProperties midp_get_suite_properties(const pcsl_string* suiteID);

/**
 * Find and return the property the matches the given key.
 * The returned value need not be freed because it resides
 * in an internal data structure.
 *
 * @param properties property list
 * @param key key of property to find
 *
 * @return a pointer to the property value,
 *        or to PCSL_STRING_NULL if not found.
 */
pcsl_string*
midp_find_property(MidpProperties properties, const pcsl_string* key);

/**
 * Return the number of properties.
 *
 * @param properties property list
 *
 * @return number of properties or OUT_MEM_STR_LEN if there was not enough
 * memory to build the list
 */
int midpGetNumberOfProperties(MidpProperties properties);

/**
 * Free a list of properties.
 *
 * @param properties property list
 */
void midpFreeProperties(MidpProperties properties);

/**
 * Returns a unique identifier of MIDlet suite.
 * Constructed from the combination
 * of the values of the <code>MIDlet-Name</code> and
 * <code>MIDlet-Vendor</code> attributes.
 *
 * @param vendor name of the vendor that created the application, as
 *          given in a JAD file
 * @param name name of the suite, as given in a JAD file
 * @param id [out] receives the platform-specific storage name of the
 *          application given by vendorName and appName
 *
 * @return 0 if success, else an error code (OUT_OF_MEM_LEN)
 */
MIDPError
midp_create_suite_id(const pcsl_string* vendor, const pcsl_string* name, pcsl_string* id);


/**
 * If the suite exists, this function returns a unique identifier of
 * MIDlet suite.
 *
 * @param vendor name of the vendor that created the application, as
 *          given in a JAD file
 * @param name name of the suite, as given in a JAD file
 * @id    [out] receives the platform-specific suite ID of the application
 *          given by vendorName and appName, or string with
 *          a null data if suite does not exist, or
 *          out of memory error occured, or suite is corrupted.
 *
 * @return  >0 if suite found
 *          NULL_LEN if suite does not exist,
 *          OUT_OF_MEM_LEN if out of memory or
 *          IO_ERROR if suite is corrupted
 */
MIDPError
midp_get_suite_id(const pcsl_string* vendor, const pcsl_string* name, pcsl_string* id);

/**
 * Stores or updates a suite.
 *
 * @param suiteID unique ID of the suite
 * @param jadUrl the absolute URL where the JAD came from, can be null
 * @param jadProps properties the JAD
 * @param jarUrl the absolute URL where the JAR came from
 * @param jarFilename the downloaded JAR
 * @param manifestProps properties of the manifest
 * @param domain security domain of the suite
 * @param trusted true if suite is trusted, false if not
 * @param pAuthPath if suite signed, the Certificate Authorization path,
 *        begining with the most trusted entity, that authorized it.
 *        This is a pointer to an array, so pAuthPath MUST NOT be NULL. 
 *        However, *pAuthPath may be NULL (if the suite is not signed).
 * @param authPathLen length of the authorization path, 0 if suite not signed
 * @param pPermissions permissions for the suite, on permission per byte
 * @param permissionsLen length of the permissions array
 * @param pushInterruptSetting push interrupt setting for the suite
 * @param pushOptions user options for push interrupts
 * @param pVerifyHash hash value of the suite with preverified classes
 * @param verifyHashLen length of the hash value of the suite
 *
 * @return status 0 for success else an error code
 */
MIDPError midp_store_suite(const pcsl_string* suiteID, const pcsl_string* jadUrl,
        MidpProperties jadProps, const pcsl_string* jarUrl,
        const pcsl_string* jarFilename,
        MidpProperties manifestProps, const pcsl_string* domain, jboolean trusted,
        pcsl_string** pAuthPath, int authPathLen,
        unsigned char*pPermissions, int permissionsLen,
        unsigned char pushInterruptSetting, long pushOptions,
        unsigned char*pVerifyHash, int verifyHashLen);

#ifdef __cplusplus
}
#endif

#endif /* _SUITESTORE_EXPORT_H_ */
